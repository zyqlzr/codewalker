// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hummer {

namespace {

const ::google::protobuf::Descriptor* server_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  server_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_server_2eproto() {
  protobuf_AddDesc_server_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "server.proto");
  GOOGLE_CHECK(file != NULL);
  server_descriptor_ = file->message_type(0);
  static const int server_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server, serverdes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server, supportbuisness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server, servercpucore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server, portup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server, portdown_),
  };
  server_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      server_descriptor_,
      server::default_instance_,
      server_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(server));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_server_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    server_descriptor_, &server::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_server_2eproto() {
  delete server::default_instance_;
  delete server_reflection_;
}

void protobuf_AddDesc_server_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014server.proto\022\006hummer\"m\n\006server\022\021\n\tServ"
    "erDes\030\001 \002(\t\022\027\n\017SupportBuisness\030\002 \003(\r\022\025\n\r"
    "ServerCpuCore\030\003 \001(\r\022\016\n\006portUp\030\004 \001(\r\022\020\n\010p"
    "ortDown\030\005 \001(\r", 133);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "server.proto", &protobuf_RegisterTypes);
  server::default_instance_ = new server();
  server::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_server_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_server_2eproto {
  StaticDescriptorInitializer_server_2eproto() {
    protobuf_AddDesc_server_2eproto();
  }
} static_descriptor_initializer_server_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int server::kServerDesFieldNumber;
const int server::kSupportBuisnessFieldNumber;
const int server::kServerCpuCoreFieldNumber;
const int server::kPortUpFieldNumber;
const int server::kPortDownFieldNumber;
#endif  // !_MSC_VER

server::server()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void server::InitAsDefaultInstance() {
}

server::server(const server& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void server::SharedCtor() {
  _cached_size_ = 0;
  serverdes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  servercpucore_ = 0u;
  portup_ = 0u;
  portdown_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

server::~server() {
  SharedDtor();
}

void server::SharedDtor() {
  if (serverdes_ != &::google::protobuf::internal::kEmptyString) {
    delete serverdes_;
  }
  if (this != default_instance_) {
  }
}

void server::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* server::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return server_descriptor_;
}

const server& server::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

server* server::default_instance_ = NULL;

server* server::New() const {
  return new server;
}

void server::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_serverdes()) {
      if (serverdes_ != &::google::protobuf::internal::kEmptyString) {
        serverdes_->clear();
      }
    }
    servercpucore_ = 0u;
    portup_ = 0u;
    portdown_ = 0u;
  }
  supportbuisness_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ServerDes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverdes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serverdes().data(), this->serverdes().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SupportBuisness;
        break;
      }

      // repeated uint32 SupportBuisness = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SupportBuisness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_supportbuisness())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_supportbuisness())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SupportBuisness;
        if (input->ExpectTag(24)) goto parse_ServerCpuCore;
        break;
      }

      // optional uint32 ServerCpuCore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ServerCpuCore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servercpucore_)));
          set_has_servercpucore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_portUp;
        break;
      }

      // optional uint32 portUp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_portUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &portup_)));
          set_has_portup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_portDown;
        break;
      }

      // optional uint32 portDown = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_portDown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &portdown_)));
          set_has_portdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ServerDes = 1;
  if (has_serverdes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverdes().data(), this->serverdes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->serverdes(), output);
  }

  // repeated uint32 SupportBuisness = 2;
  for (int i = 0; i < this->supportbuisness_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->supportbuisness(i), output);
  }

  // optional uint32 ServerCpuCore = 3;
  if (has_servercpucore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->servercpucore(), output);
  }

  // optional uint32 portUp = 4;
  if (has_portup()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->portup(), output);
  }

  // optional uint32 portDown = 5;
  if (has_portdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->portdown(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* server::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ServerDes = 1;
  if (has_serverdes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverdes().data(), this->serverdes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serverdes(), target);
  }

  // repeated uint32 SupportBuisness = 2;
  for (int i = 0; i < this->supportbuisness_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->supportbuisness(i), target);
  }

  // optional uint32 ServerCpuCore = 3;
  if (has_servercpucore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->servercpucore(), target);
  }

  // optional uint32 portUp = 4;
  if (has_portup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->portup(), target);
  }

  // optional uint32 portDown = 5;
  if (has_portdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->portdown(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int server::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ServerDes = 1;
    if (has_serverdes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverdes());
    }

    // optional uint32 ServerCpuCore = 3;
    if (has_servercpucore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servercpucore());
    }

    // optional uint32 portUp = 4;
    if (has_portup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->portup());
    }

    // optional uint32 portDown = 5;
    if (has_portdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->portdown());
    }

  }
  // repeated uint32 SupportBuisness = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->supportbuisness_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->supportbuisness(i));
    }
    total_size += 1 * this->supportbuisness_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void server::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const server* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const server*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void server::MergeFrom(const server& from) {
  GOOGLE_CHECK_NE(&from, this);
  supportbuisness_.MergeFrom(from.supportbuisness_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverdes()) {
      set_serverdes(from.serverdes());
    }
    if (from.has_servercpucore()) {
      set_servercpucore(from.servercpucore());
    }
    if (from.has_portup()) {
      set_portup(from.portup());
    }
    if (from.has_portdown()) {
      set_portdown(from.portdown());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void server::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void server::CopyFrom(const server& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool server::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void server::Swap(server* other) {
  if (other != this) {
    std::swap(serverdes_, other->serverdes_);
    supportbuisness_.Swap(&other->supportbuisness_);
    std::swap(servercpucore_, other->servercpucore_);
    std::swap(portup_, other->portup_);
    std::swap(portdown_, other->portdown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata server::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = server_descriptor_;
  metadata.reflection = server_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hummer

// @@protoc_insertion_point(global_scope)
