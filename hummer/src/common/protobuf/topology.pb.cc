// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: topology.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "topology.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hummer {

namespace {

const ::google::protobuf::Descriptor* queue_def_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queue_def_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_def_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_def_reflection_ = NULL;
const ::google::protobuf::Descriptor* io_def_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  io_def_reflection_ = NULL;
const ::google::protobuf::Descriptor* node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  node_reflection_ = NULL;
const ::google::protobuf::Descriptor* topology_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  topology_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_topology_2eproto() {
  protobuf_AddDesc_topology_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "topology.proto");
  GOOGLE_CHECK(file != NULL);
  queue_def_descriptor_ = file->message_type(0);
  static const int queue_def_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queue_def, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queue_def, mqtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queue_def, useflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queue_def, ackflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queue_def, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queue_def, queue_),
  };
  queue_def_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queue_def_descriptor_,
      queue_def::default_instance_,
      queue_def_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queue_def, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queue_def, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queue_def));
  db_def_descriptor_ = file->message_type(1);
  static const int db_def_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_def, dbtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_def, dbhost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_def, dbusr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_def, dbpw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_def, dbport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_def, dbname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_def, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_def, mysqlunixsock_),
  };
  db_def_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_def_descriptor_,
      db_def::default_instance_,
      db_def_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_def, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_def, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_def));
  io_def_descriptor_ = file->message_type(2);
  static const int io_def_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(io_def, iotype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(io_def, iodb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(io_def, ioq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(io_def, iozmqhost_),
  };
  io_def_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      io_def_descriptor_,
      io_def::default_instance_,
      io_def_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(io_def, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(io_def, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(io_def));
  node_descriptor_ = file->message_type(3);
  static const int node_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node, serverdes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node, nodetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node, inputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node, outputs_),
  };
  node_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      node_descriptor_,
      node::default_instance_,
      node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(node));
  topology_descriptor_ = file->message_type(4);
  static const int topology_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(topology, topologyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(topology, nodes_),
  };
  topology_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      topology_descriptor_,
      topology::default_instance_,
      topology_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(topology, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(topology, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(topology));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_topology_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queue_def_descriptor_, &queue_def::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_def_descriptor_, &db_def::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    io_def_descriptor_, &io_def::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    node_descriptor_, &node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    topology_descriptor_, &topology::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_topology_2eproto() {
  delete queue_def::default_instance_;
  delete queue_def_reflection_;
  delete db_def::default_instance_;
  delete db_def_reflection_;
  delete io_def::default_instance_;
  delete io_def_reflection_;
  delete node::default_instance_;
  delete node_reflection_;
  delete topology::default_instance_;
  delete topology_reflection_;
}

void protobuf_AddDesc_topology_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016topology.proto\022\006hummer\"i\n\tqueue_def\022\014\n"
    "\004host\030\001 \001(\t\022\016\n\006mqType\030\002 \001(\r\022\017\n\007useFlag\030\003"
    " \001(\010\022\017\n\007ackFlag\030\004 \001(\010\022\r\n\005topic\030\005 \001(\t\022\r\n\005"
    "queue\030\006 \001(\t\"\217\001\n\006db_def\022\016\n\006dbtype\030\001 \001(\r\022\016"
    "\n\006dbhost\030\002 \001(\t\022\r\n\005dbusr\030\003 \001(\t\022\014\n\004dbpw\030\004 "
    "\001(\t\022\016\n\006dbport\030\005 \001(\r\022\016\n\006dbname\030\006 \001(\t\022\021\n\tt"
    "ablename\030\007 \003(\t\022\025\n\rmysqlUnixSock\030\010 \001(\t\"i\n"
    "\006io_def\022\016\n\006ioType\030\001 \002(\r\022\034\n\004ioDB\030\002 \001(\0132\016."
    "hummer.db_def\022\036\n\003ioQ\030\003 \001(\0132\021.hummer.queu"
    "e_def\022\021\n\tioZmqhost\030\004 \001(\t\"l\n\004node\022\021\n\tserv"
    "erDes\030\001 \002(\t\022\020\n\010nodeType\030\002 \002(\r\022\036\n\006inputs\030"
    "\003 \003(\0132\016.hummer.io_def\022\037\n\007outputs\030\004 \003(\0132\016"
    ".hummer.io_def\";\n\010topology\022\022\n\ntopologyId"
    "\030\001 \002(\004\022\033\n\005nodes\030\002 \003(\0132\014.hummer.node", 555);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "topology.proto", &protobuf_RegisterTypes);
  queue_def::default_instance_ = new queue_def();
  db_def::default_instance_ = new db_def();
  io_def::default_instance_ = new io_def();
  node::default_instance_ = new node();
  topology::default_instance_ = new topology();
  queue_def::default_instance_->InitAsDefaultInstance();
  db_def::default_instance_->InitAsDefaultInstance();
  io_def::default_instance_->InitAsDefaultInstance();
  node::default_instance_->InitAsDefaultInstance();
  topology::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_topology_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_topology_2eproto {
  StaticDescriptorInitializer_topology_2eproto() {
    protobuf_AddDesc_topology_2eproto();
  }
} static_descriptor_initializer_topology_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int queue_def::kHostFieldNumber;
const int queue_def::kMqTypeFieldNumber;
const int queue_def::kUseFlagFieldNumber;
const int queue_def::kAckFlagFieldNumber;
const int queue_def::kTopicFieldNumber;
const int queue_def::kQueueFieldNumber;
#endif  // !_MSC_VER

queue_def::queue_def()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queue_def::InitAsDefaultInstance() {
}

queue_def::queue_def(const queue_def& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queue_def::SharedCtor() {
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mqtype_ = 0u;
  useflag_ = false;
  ackflag_ = false;
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  queue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queue_def::~queue_def() {
  SharedDtor();
}

void queue_def::SharedDtor() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (topic_ != &::google::protobuf::internal::kEmptyString) {
    delete topic_;
  }
  if (queue_ != &::google::protobuf::internal::kEmptyString) {
    delete queue_;
  }
  if (this != default_instance_) {
  }
}

void queue_def::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queue_def::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queue_def_descriptor_;
}

const queue_def& queue_def::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_topology_2eproto();
  return *default_instance_;
}

queue_def* queue_def::default_instance_ = NULL;

queue_def* queue_def::New() const {
  return new queue_def;
}

void queue_def::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    mqtype_ = 0u;
    useflag_ = false;
    ackflag_ = false;
    if (has_topic()) {
      if (topic_ != &::google::protobuf::internal::kEmptyString) {
        topic_->clear();
      }
    }
    if (has_queue()) {
      if (queue_ != &::google::protobuf::internal::kEmptyString) {
        queue_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queue_def::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string host = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mqType;
        break;
      }

      // optional uint32 mqType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mqType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mqtype_)));
          set_has_mqtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_useFlag;
        break;
      }

      // optional bool useFlag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &useflag_)));
          set_has_useflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ackFlag;
        break;
      }

      // optional bool ackFlag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ackFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ackflag_)));
          set_has_ackflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_topic;
        break;
      }

      // optional string topic = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_queue;
        break;
      }

      // optional string queue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_queue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->queue().data(), this->queue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queue_def::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->host(), output);
  }

  // optional uint32 mqType = 2;
  if (has_mqtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mqtype(), output);
  }

  // optional bool useFlag = 3;
  if (has_useflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->useflag(), output);
  }

  // optional bool ackFlag = 4;
  if (has_ackflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ackflag(), output);
  }

  // optional string topic = 5;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->topic(), output);
  }

  // optional string queue = 6;
  if (has_queue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->queue().data(), this->queue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->queue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queue_def::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // optional uint32 mqType = 2;
  if (has_mqtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mqtype(), target);
  }

  // optional bool useFlag = 3;
  if (has_useflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->useflag(), target);
  }

  // optional bool ackFlag = 4;
  if (has_ackflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ackflag(), target);
  }

  // optional string topic = 5;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->topic(), target);
  }

  // optional string queue = 6;
  if (has_queue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->queue().data(), this->queue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->queue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queue_def::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string host = 1;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional uint32 mqType = 2;
    if (has_mqtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mqtype());
    }

    // optional bool useFlag = 3;
    if (has_useflag()) {
      total_size += 1 + 1;
    }

    // optional bool ackFlag = 4;
    if (has_ackflag()) {
      total_size += 1 + 1;
    }

    // optional string topic = 5;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }

    // optional string queue = 6;
    if (has_queue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->queue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queue_def::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queue_def* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queue_def*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queue_def::MergeFrom(const queue_def& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_mqtype()) {
      set_mqtype(from.mqtype());
    }
    if (from.has_useflag()) {
      set_useflag(from.useflag());
    }
    if (from.has_ackflag()) {
      set_ackflag(from.ackflag());
    }
    if (from.has_topic()) {
      set_topic(from.topic());
    }
    if (from.has_queue()) {
      set_queue(from.queue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queue_def::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queue_def::CopyFrom(const queue_def& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queue_def::IsInitialized() const {

  return true;
}

void queue_def::Swap(queue_def* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(mqtype_, other->mqtype_);
    std::swap(useflag_, other->useflag_);
    std::swap(ackflag_, other->ackflag_);
    std::swap(topic_, other->topic_);
    std::swap(queue_, other->queue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queue_def::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queue_def_descriptor_;
  metadata.reflection = queue_def_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_def::kDbtypeFieldNumber;
const int db_def::kDbhostFieldNumber;
const int db_def::kDbusrFieldNumber;
const int db_def::kDbpwFieldNumber;
const int db_def::kDbportFieldNumber;
const int db_def::kDbnameFieldNumber;
const int db_def::kTablenameFieldNumber;
const int db_def::kMysqlUnixSockFieldNumber;
#endif  // !_MSC_VER

db_def::db_def()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_def::InitAsDefaultInstance() {
}

db_def::db_def(const db_def& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_def::SharedCtor() {
  _cached_size_ = 0;
  dbtype_ = 0u;
  dbhost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dbusr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dbpw_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dbport_ = 0u;
  dbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mysqlunixsock_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_def::~db_def() {
  SharedDtor();
}

void db_def::SharedDtor() {
  if (dbhost_ != &::google::protobuf::internal::kEmptyString) {
    delete dbhost_;
  }
  if (dbusr_ != &::google::protobuf::internal::kEmptyString) {
    delete dbusr_;
  }
  if (dbpw_ != &::google::protobuf::internal::kEmptyString) {
    delete dbpw_;
  }
  if (dbname_ != &::google::protobuf::internal::kEmptyString) {
    delete dbname_;
  }
  if (mysqlunixsock_ != &::google::protobuf::internal::kEmptyString) {
    delete mysqlunixsock_;
  }
  if (this != default_instance_) {
  }
}

void db_def::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_def::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_def_descriptor_;
}

const db_def& db_def::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_topology_2eproto();
  return *default_instance_;
}

db_def* db_def::default_instance_ = NULL;

db_def* db_def::New() const {
  return new db_def;
}

void db_def::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dbtype_ = 0u;
    if (has_dbhost()) {
      if (dbhost_ != &::google::protobuf::internal::kEmptyString) {
        dbhost_->clear();
      }
    }
    if (has_dbusr()) {
      if (dbusr_ != &::google::protobuf::internal::kEmptyString) {
        dbusr_->clear();
      }
    }
    if (has_dbpw()) {
      if (dbpw_ != &::google::protobuf::internal::kEmptyString) {
        dbpw_->clear();
      }
    }
    dbport_ = 0u;
    if (has_dbname()) {
      if (dbname_ != &::google::protobuf::internal::kEmptyString) {
        dbname_->clear();
      }
    }
    if (has_mysqlunixsock()) {
      if (mysqlunixsock_ != &::google::protobuf::internal::kEmptyString) {
        mysqlunixsock_->clear();
      }
    }
  }
  tablename_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_def::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dbtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dbtype_)));
          set_has_dbtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dbhost;
        break;
      }

      // optional string dbhost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dbhost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbhost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dbhost().data(), this->dbhost().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dbusr;
        break;
      }

      // optional string dbusr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dbusr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbusr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dbusr().data(), this->dbusr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dbpw;
        break;
      }

      // optional string dbpw = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dbpw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbpw()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dbpw().data(), this->dbpw().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dbport;
        break;
      }

      // optional uint32 dbport = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dbport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dbport_)));
          set_has_dbport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_dbname;
        break;
      }

      // optional string dbname = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dbname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dbname().data(), this->dbname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_tablename;
        break;
      }

      // repeated string tablename = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tablename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tablename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tablename(this->tablename_size() - 1).data(),
            this->tablename(this->tablename_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_tablename;
        if (input->ExpectTag(66)) goto parse_mysqlUnixSock;
        break;
      }

      // optional string mysqlUnixSock = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mysqlUnixSock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mysqlunixsock()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mysqlunixsock().data(), this->mysqlunixsock().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_def::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 dbtype = 1;
  if (has_dbtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dbtype(), output);
  }

  // optional string dbhost = 2;
  if (has_dbhost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbhost().data(), this->dbhost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dbhost(), output);
  }

  // optional string dbusr = 3;
  if (has_dbusr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbusr().data(), this->dbusr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->dbusr(), output);
  }

  // optional string dbpw = 4;
  if (has_dbpw()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbpw().data(), this->dbpw().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->dbpw(), output);
  }

  // optional uint32 dbport = 5;
  if (has_dbport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dbport(), output);
  }

  // optional string dbname = 6;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbname().data(), this->dbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->dbname(), output);
  }

  // repeated string tablename = 7;
  for (int i = 0; i < this->tablename_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->tablename(i).data(), this->tablename(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->tablename(i), output);
  }

  // optional string mysqlUnixSock = 8;
  if (has_mysqlunixsock()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mysqlunixsock().data(), this->mysqlunixsock().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->mysqlunixsock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_def::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 dbtype = 1;
  if (has_dbtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dbtype(), target);
  }

  // optional string dbhost = 2;
  if (has_dbhost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbhost().data(), this->dbhost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dbhost(), target);
  }

  // optional string dbusr = 3;
  if (has_dbusr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbusr().data(), this->dbusr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dbusr(), target);
  }

  // optional string dbpw = 4;
  if (has_dbpw()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbpw().data(), this->dbpw().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dbpw(), target);
  }

  // optional uint32 dbport = 5;
  if (has_dbport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dbport(), target);
  }

  // optional string dbname = 6;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbname().data(), this->dbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->dbname(), target);
  }

  // repeated string tablename = 7;
  for (int i = 0; i < this->tablename_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablename(i).data(), this->tablename(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->tablename(i), target);
  }

  // optional string mysqlUnixSock = 8;
  if (has_mysqlunixsock()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mysqlunixsock().data(), this->mysqlunixsock().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->mysqlunixsock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_def::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dbtype = 1;
    if (has_dbtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dbtype());
    }

    // optional string dbhost = 2;
    if (has_dbhost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbhost());
    }

    // optional string dbusr = 3;
    if (has_dbusr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbusr());
    }

    // optional string dbpw = 4;
    if (has_dbpw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbpw());
    }

    // optional uint32 dbport = 5;
    if (has_dbport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dbport());
    }

    // optional string dbname = 6;
    if (has_dbname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbname());
    }

    // optional string mysqlUnixSock = 8;
    if (has_mysqlunixsock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mysqlunixsock());
    }

  }
  // repeated string tablename = 7;
  total_size += 1 * this->tablename_size();
  for (int i = 0; i < this->tablename_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tablename(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_def::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_def* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_def*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_def::MergeFrom(const db_def& from) {
  GOOGLE_CHECK_NE(&from, this);
  tablename_.MergeFrom(from.tablename_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dbtype()) {
      set_dbtype(from.dbtype());
    }
    if (from.has_dbhost()) {
      set_dbhost(from.dbhost());
    }
    if (from.has_dbusr()) {
      set_dbusr(from.dbusr());
    }
    if (from.has_dbpw()) {
      set_dbpw(from.dbpw());
    }
    if (from.has_dbport()) {
      set_dbport(from.dbport());
    }
    if (from.has_dbname()) {
      set_dbname(from.dbname());
    }
    if (from.has_mysqlunixsock()) {
      set_mysqlunixsock(from.mysqlunixsock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_def::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_def::CopyFrom(const db_def& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_def::IsInitialized() const {

  return true;
}

void db_def::Swap(db_def* other) {
  if (other != this) {
    std::swap(dbtype_, other->dbtype_);
    std::swap(dbhost_, other->dbhost_);
    std::swap(dbusr_, other->dbusr_);
    std::swap(dbpw_, other->dbpw_);
    std::swap(dbport_, other->dbport_);
    std::swap(dbname_, other->dbname_);
    tablename_.Swap(&other->tablename_);
    std::swap(mysqlunixsock_, other->mysqlunixsock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_def::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_def_descriptor_;
  metadata.reflection = db_def_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int io_def::kIoTypeFieldNumber;
const int io_def::kIoDBFieldNumber;
const int io_def::kIoQFieldNumber;
const int io_def::kIoZmqhostFieldNumber;
#endif  // !_MSC_VER

io_def::io_def()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void io_def::InitAsDefaultInstance() {
  iodb_ = const_cast< ::hummer::db_def*>(&::hummer::db_def::default_instance());
  ioq_ = const_cast< ::hummer::queue_def*>(&::hummer::queue_def::default_instance());
}

io_def::io_def(const io_def& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void io_def::SharedCtor() {
  _cached_size_ = 0;
  iotype_ = 0u;
  iodb_ = NULL;
  ioq_ = NULL;
  iozmqhost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

io_def::~io_def() {
  SharedDtor();
}

void io_def::SharedDtor() {
  if (iozmqhost_ != &::google::protobuf::internal::kEmptyString) {
    delete iozmqhost_;
  }
  if (this != default_instance_) {
    delete iodb_;
    delete ioq_;
  }
}

void io_def::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* io_def::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return io_def_descriptor_;
}

const io_def& io_def::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_topology_2eproto();
  return *default_instance_;
}

io_def* io_def::default_instance_ = NULL;

io_def* io_def::New() const {
  return new io_def;
}

void io_def::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iotype_ = 0u;
    if (has_iodb()) {
      if (iodb_ != NULL) iodb_->::hummer::db_def::Clear();
    }
    if (has_ioq()) {
      if (ioq_ != NULL) ioq_->::hummer::queue_def::Clear();
    }
    if (has_iozmqhost()) {
      if (iozmqhost_ != &::google::protobuf::internal::kEmptyString) {
        iozmqhost_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool io_def::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ioType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iotype_)));
          set_has_iotype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ioDB;
        break;
      }

      // optional .hummer.db_def ioDB = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ioDB:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iodb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ioQ;
        break;
      }

      // optional .hummer.queue_def ioQ = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ioQ:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ioq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ioZmqhost;
        break;
      }

      // optional string ioZmqhost = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ioZmqhost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iozmqhost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->iozmqhost().data(), this->iozmqhost().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void io_def::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ioType = 1;
  if (has_iotype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->iotype(), output);
  }

  // optional .hummer.db_def ioDB = 2;
  if (has_iodb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->iodb(), output);
  }

  // optional .hummer.queue_def ioQ = 3;
  if (has_ioq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ioq(), output);
  }

  // optional string ioZmqhost = 4;
  if (has_iozmqhost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iozmqhost().data(), this->iozmqhost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->iozmqhost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* io_def::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ioType = 1;
  if (has_iotype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->iotype(), target);
  }

  // optional .hummer.db_def ioDB = 2;
  if (has_iodb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->iodb(), target);
  }

  // optional .hummer.queue_def ioQ = 3;
  if (has_ioq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ioq(), target);
  }

  // optional string ioZmqhost = 4;
  if (has_iozmqhost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iozmqhost().data(), this->iozmqhost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->iozmqhost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int io_def::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ioType = 1;
    if (has_iotype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iotype());
    }

    // optional .hummer.db_def ioDB = 2;
    if (has_iodb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iodb());
    }

    // optional .hummer.queue_def ioQ = 3;
    if (has_ioq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ioq());
    }

    // optional string ioZmqhost = 4;
    if (has_iozmqhost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iozmqhost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void io_def::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const io_def* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const io_def*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void io_def::MergeFrom(const io_def& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iotype()) {
      set_iotype(from.iotype());
    }
    if (from.has_iodb()) {
      mutable_iodb()->::hummer::db_def::MergeFrom(from.iodb());
    }
    if (from.has_ioq()) {
      mutable_ioq()->::hummer::queue_def::MergeFrom(from.ioq());
    }
    if (from.has_iozmqhost()) {
      set_iozmqhost(from.iozmqhost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void io_def::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void io_def::CopyFrom(const io_def& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool io_def::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void io_def::Swap(io_def* other) {
  if (other != this) {
    std::swap(iotype_, other->iotype_);
    std::swap(iodb_, other->iodb_);
    std::swap(ioq_, other->ioq_);
    std::swap(iozmqhost_, other->iozmqhost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata io_def::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = io_def_descriptor_;
  metadata.reflection = io_def_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int node::kServerDesFieldNumber;
const int node::kNodeTypeFieldNumber;
const int node::kInputsFieldNumber;
const int node::kOutputsFieldNumber;
#endif  // !_MSC_VER

node::node()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void node::InitAsDefaultInstance() {
}

node::node(const node& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void node::SharedCtor() {
  _cached_size_ = 0;
  serverdes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nodetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

node::~node() {
  SharedDtor();
}

void node::SharedDtor() {
  if (serverdes_ != &::google::protobuf::internal::kEmptyString) {
    delete serverdes_;
  }
  if (this != default_instance_) {
  }
}

void node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return node_descriptor_;
}

const node& node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_topology_2eproto();
  return *default_instance_;
}

node* node::default_instance_ = NULL;

node* node::New() const {
  return new node;
}

void node::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_serverdes()) {
      if (serverdes_ != &::google::protobuf::internal::kEmptyString) {
        serverdes_->clear();
      }
    }
    nodetype_ = 0u;
  }
  inputs_.Clear();
  outputs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string serverDes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverdes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serverdes().data(), this->serverdes().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nodeType;
        break;
      }

      // required uint32 nodeType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nodeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nodetype_)));
          set_has_nodetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_inputs;
        break;
      }

      // repeated .hummer.io_def inputs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_inputs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_inputs;
        if (input->ExpectTag(34)) goto parse_outputs;
        break;
      }

      // repeated .hummer.io_def outputs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_outputs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_outputs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string serverDes = 1;
  if (has_serverdes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverdes().data(), this->serverdes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->serverdes(), output);
  }

  // required uint32 nodeType = 2;
  if (has_nodetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nodetype(), output);
  }

  // repeated .hummer.io_def inputs = 3;
  for (int i = 0; i < this->inputs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->inputs(i), output);
  }

  // repeated .hummer.io_def outputs = 4;
  for (int i = 0; i < this->outputs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->outputs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string serverDes = 1;
  if (has_serverdes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverdes().data(), this->serverdes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serverdes(), target);
  }

  // required uint32 nodeType = 2;
  if (has_nodetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nodetype(), target);
  }

  // repeated .hummer.io_def inputs = 3;
  for (int i = 0; i < this->inputs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->inputs(i), target);
  }

  // repeated .hummer.io_def outputs = 4;
  for (int i = 0; i < this->outputs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->outputs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int node::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string serverDes = 1;
    if (has_serverdes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverdes());
    }

    // required uint32 nodeType = 2;
    if (has_nodetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nodetype());
    }

  }
  // repeated .hummer.io_def inputs = 3;
  total_size += 1 * this->inputs_size();
  for (int i = 0; i < this->inputs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->inputs(i));
  }

  // repeated .hummer.io_def outputs = 4;
  total_size += 1 * this->outputs_size();
  for (int i = 0; i < this->outputs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->outputs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void node::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const node* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const node*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void node::MergeFrom(const node& from) {
  GOOGLE_CHECK_NE(&from, this);
  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverdes()) {
      set_serverdes(from.serverdes());
    }
    if (from.has_nodetype()) {
      set_nodetype(from.nodetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void node::CopyFrom(const node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool node::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < inputs_size(); i++) {
    if (!this->inputs(i).IsInitialized()) return false;
  }
  for (int i = 0; i < outputs_size(); i++) {
    if (!this->outputs(i).IsInitialized()) return false;
  }
  return true;
}

void node::Swap(node* other) {
  if (other != this) {
    std::swap(serverdes_, other->serverdes_);
    std::swap(nodetype_, other->nodetype_);
    inputs_.Swap(&other->inputs_);
    outputs_.Swap(&other->outputs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = node_descriptor_;
  metadata.reflection = node_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int topology::kTopologyIdFieldNumber;
const int topology::kNodesFieldNumber;
#endif  // !_MSC_VER

topology::topology()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void topology::InitAsDefaultInstance() {
}

topology::topology(const topology& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void topology::SharedCtor() {
  _cached_size_ = 0;
  topologyid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

topology::~topology() {
  SharedDtor();
}

void topology::SharedDtor() {
  if (this != default_instance_) {
  }
}

void topology::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* topology::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return topology_descriptor_;
}

const topology& topology::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_topology_2eproto();
  return *default_instance_;
}

topology* topology::default_instance_ = NULL;

topology* topology::New() const {
  return new topology;
}

void topology::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    topologyid_ = GOOGLE_ULONGLONG(0);
  }
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool topology::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 topologyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &topologyid_)));
          set_has_topologyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nodes;
        break;
      }

      // repeated .hummer.node nodes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void topology::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 topologyId = 1;
  if (has_topologyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->topologyid(), output);
  }

  // repeated .hummer.node nodes = 2;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->nodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* topology::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 topologyId = 1;
  if (has_topologyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->topologyid(), target);
  }

  // repeated .hummer.node nodes = 2;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->nodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int topology::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 topologyId = 1;
    if (has_topologyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->topologyid());
    }

  }
  // repeated .hummer.node nodes = 2;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void topology::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const topology* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const topology*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void topology::MergeFrom(const topology& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_topologyid()) {
      set_topologyid(from.topologyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void topology::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void topology::CopyFrom(const topology& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool topology::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < nodes_size(); i++) {
    if (!this->nodes(i).IsInitialized()) return false;
  }
  return true;
}

void topology::Swap(topology* other) {
  if (other != this) {
    std::swap(topologyid_, other->topologyid_);
    nodes_.Swap(&other->nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata topology::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = topology_descriptor_;
  metadata.reflection = topology_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hummer

// @@protoc_insertion_point(global_scope)
