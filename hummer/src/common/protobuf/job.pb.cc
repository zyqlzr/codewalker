// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: job.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "job.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hummer {

namespace {

const ::google::protobuf::Descriptor* split_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  split_reflection_ = NULL;
const ::google::protobuf::Descriptor* statistic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  statistic_reflection_ = NULL;
const ::google::protobuf::Descriptor* taskHB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  taskHB_reflection_ = NULL;
const ::google::protobuf::Descriptor* task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  task_reflection_ = NULL;
const ::google::protobuf::Descriptor* assignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  assignment_reflection_ = NULL;
const ::google::protobuf::Descriptor* job_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  job_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_job_2eproto() {
  protobuf_AddDesc_job_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "job.proto");
  GOOGLE_CHECK(file != NULL);
  split_descriptor_ = file->message_type(0);
  static const int split_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(split, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(split, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(split, svalue_),
  };
  split_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      split_descriptor_,
      split::default_instance_,
      split_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(split, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(split, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(split));
  statistic_descriptor_ = file->message_type(1);
  static const int statistic_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistic, msgtotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistic, msgerr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistic, msgok_),
  };
  statistic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      statistic_descriptor_,
      statistic::default_instance_,
      statistic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(statistic));
  taskHB_descriptor_ = file->message_type(2);
  static const int taskHB_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskHB, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskHB, jobid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskHB, serverdes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskHB, business_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskHB, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskHB, stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskHB, splits_),
  };
  taskHB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      taskHB_descriptor_,
      taskHB::default_instance_,
      taskHB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskHB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskHB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(taskHB));
  task_descriptor_ = file->message_type(3);
  static const int task_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, tasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, jobid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, business_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, serverdes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, srcdes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, dstdes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, splits_),
  };
  task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      task_descriptor_,
      task::default_instance_,
      task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(task));
  assignment_descriptor_ = file->message_type(4);
  static const int assignment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(assignment, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(assignment, split_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(assignment, finiflag_),
  };
  assignment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      assignment_descriptor_,
      assignment::default_instance_,
      assignment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(assignment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(assignment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(assignment));
  job_descriptor_ = file->message_type(5);
  static const int job_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job, jobdes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job, jobid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job, jobtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job, jobstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job, business_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job, cpucore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job, srcdes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job, dstdes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job, splits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job, assigns_),
  };
  job_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      job_descriptor_,
      job::default_instance_,
      job_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(job));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_job_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    split_descriptor_, &split::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    statistic_descriptor_, &statistic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    taskHB_descriptor_, &taskHB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    task_descriptor_, &task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    assignment_descriptor_, &assignment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    job_descriptor_, &job::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_job_2eproto() {
  delete split::default_instance_;
  delete split_reflection_;
  delete statistic::default_instance_;
  delete statistic_reflection_;
  delete taskHB::default_instance_;
  delete taskHB_reflection_;
  delete task::default_instance_;
  delete task_reflection_;
  delete assignment::default_instance_;
  delete assignment_reflection_;
  delete job::default_instance_;
  delete job_reflection_;
}

void protobuf_AddDesc_job_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tjob.proto\022\006hummer\"2\n\005split\022\014\n\004type\030\001 \001"
    "(\005\022\013\n\003sId\030\002 \001(\t\022\016\n\006sValue\030\003 \001(\t\"<\n\tstati"
    "stic\022\020\n\010msgTotal\030\001 \001(\004\022\016\n\006msgErr\030\002 \001(\004\022\r"
    "\n\005msgOk\030\003 \001(\004\"\234\001\n\006taskHB\022\016\n\006taskId\030\001 \002(\r"
    "\022\r\n\005jobId\030\002 \002(\r\022\021\n\tserverDes\030\003 \002(\t\022\020\n\010bu"
    "siness\030\004 \002(\r\022\016\n\006status\030\005 \002(\r\022\037\n\004stat\030\006 \001"
    "(\0132\021.hummer.statistic\022\035\n\006splits\030\007 \003(\0132\r."
    "hummer.split\"\251\001\n\004task\022\016\n\006taskId\030\001 \002(\004\022\020\n"
    "\010taskType\030\002 \002(\r\022\r\n\005jobId\030\003 \002(\004\022\020\n\010busine"
    "ss\030\005 \001(\r\022\021\n\tserverDes\030\006 \001(\t\022\014\n\004slot\030\007 \001("
    "\t\022\016\n\006srcDes\030\010 \003(\t\022\016\n\006dstDes\030\t \003(\t\022\035\n\006spl"
    "its\030\n \003(\0132\r.hummer.split\":\n\nassignment\022\013"
    "\n\003tid\030\001 \001(\004\022\r\n\005split\030\002 \001(\t\022\020\n\010finiFlag\030\003"
    " \001(\010\"\317\001\n\003job\022\016\n\006jobDes\030\001 \002(\t\022\r\n\005jobId\030\002 "
    "\002(\004\022\017\n\007jobType\030\003 \002(\r\022\021\n\tjobStatus\030\004 \002(\r\022"
    "\020\n\010business\030\005 \001(\r\022\017\n\007cpucore\030\006 \001(\r\022\016\n\006sr"
    "cDes\030\007 \003(\t\022\016\n\006dstDes\030\010 \003(\t\022\035\n\006splits\030\t \003"
    "(\0132\r.hummer.split\022#\n\007assigns\030\n \003(\0132\022.hum"
    "mer.assignment", 734);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "job.proto", &protobuf_RegisterTypes);
  split::default_instance_ = new split();
  statistic::default_instance_ = new statistic();
  taskHB::default_instance_ = new taskHB();
  task::default_instance_ = new task();
  assignment::default_instance_ = new assignment();
  job::default_instance_ = new job();
  split::default_instance_->InitAsDefaultInstance();
  statistic::default_instance_->InitAsDefaultInstance();
  taskHB::default_instance_->InitAsDefaultInstance();
  task::default_instance_->InitAsDefaultInstance();
  assignment::default_instance_->InitAsDefaultInstance();
  job::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_job_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_job_2eproto {
  StaticDescriptorInitializer_job_2eproto() {
    protobuf_AddDesc_job_2eproto();
  }
} static_descriptor_initializer_job_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int split::kTypeFieldNumber;
const int split::kSIdFieldNumber;
const int split::kSValueFieldNumber;
#endif  // !_MSC_VER

split::split()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void split::InitAsDefaultInstance() {
}

split::split(const split& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void split::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  svalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

split::~split() {
  SharedDtor();
}

void split::SharedDtor() {
  if (sid_ != &::google::protobuf::internal::kEmptyString) {
    delete sid_;
  }
  if (svalue_ != &::google::protobuf::internal::kEmptyString) {
    delete svalue_;
  }
  if (this != default_instance_) {
  }
}

void split::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* split::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return split_descriptor_;
}

const split& split::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_job_2eproto();
  return *default_instance_;
}

split* split::default_instance_ = NULL;

split* split::New() const {
  return new split;
}

void split::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_sid()) {
      if (sid_ != &::google::protobuf::internal::kEmptyString) {
        sid_->clear();
      }
    }
    if (has_svalue()) {
      if (svalue_ != &::google::protobuf::internal::kEmptyString) {
        svalue_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool split::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sId;
        break;
      }

      // optional string sId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sid().data(), this->sid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sValue;
        break;
      }

      // optional string sValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_svalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->svalue().data(), this->svalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void split::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string sId = 2;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sid(), output);
  }

  // optional string sValue = 3;
  if (has_svalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svalue().data(), this->svalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->svalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* split::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string sId = 2;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sid(), target);
  }

  // optional string sValue = 3;
  if (has_svalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svalue().data(), this->svalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->svalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int split::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string sId = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }

    // optional string sValue = 3;
    if (has_svalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->svalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void split::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const split* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const split*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void split::MergeFrom(const split& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_svalue()) {
      set_svalue(from.svalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void split::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void split::CopyFrom(const split& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool split::IsInitialized() const {

  return true;
}

void split::Swap(split* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(sid_, other->sid_);
    std::swap(svalue_, other->svalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata split::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = split_descriptor_;
  metadata.reflection = split_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int statistic::kMsgTotalFieldNumber;
const int statistic::kMsgErrFieldNumber;
const int statistic::kMsgOkFieldNumber;
#endif  // !_MSC_VER

statistic::statistic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void statistic::InitAsDefaultInstance() {
}

statistic::statistic(const statistic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void statistic::SharedCtor() {
  _cached_size_ = 0;
  msgtotal_ = GOOGLE_ULONGLONG(0);
  msgerr_ = GOOGLE_ULONGLONG(0);
  msgok_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

statistic::~statistic() {
  SharedDtor();
}

void statistic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void statistic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* statistic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return statistic_descriptor_;
}

const statistic& statistic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_job_2eproto();
  return *default_instance_;
}

statistic* statistic::default_instance_ = NULL;

statistic* statistic::New() const {
  return new statistic;
}

void statistic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgtotal_ = GOOGLE_ULONGLONG(0);
    msgerr_ = GOOGLE_ULONGLONG(0);
    msgok_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool statistic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 msgTotal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgtotal_)));
          set_has_msgtotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msgErr;
        break;
      }

      // optional uint64 msgErr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgErr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgerr_)));
          set_has_msgerr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_msgOk;
        break;
      }

      // optional uint64 msgOk = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgOk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgok_)));
          set_has_msgok();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void statistic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 msgTotal = 1;
  if (has_msgtotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->msgtotal(), output);
  }

  // optional uint64 msgErr = 2;
  if (has_msgerr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->msgerr(), output);
  }

  // optional uint64 msgOk = 3;
  if (has_msgok()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->msgok(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* statistic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 msgTotal = 1;
  if (has_msgtotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->msgtotal(), target);
  }

  // optional uint64 msgErr = 2;
  if (has_msgerr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->msgerr(), target);
  }

  // optional uint64 msgOk = 3;
  if (has_msgok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->msgok(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int statistic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 msgTotal = 1;
    if (has_msgtotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msgtotal());
    }

    // optional uint64 msgErr = 2;
    if (has_msgerr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msgerr());
    }

    // optional uint64 msgOk = 3;
    if (has_msgok()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msgok());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void statistic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const statistic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const statistic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void statistic::MergeFrom(const statistic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtotal()) {
      set_msgtotal(from.msgtotal());
    }
    if (from.has_msgerr()) {
      set_msgerr(from.msgerr());
    }
    if (from.has_msgok()) {
      set_msgok(from.msgok());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void statistic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void statistic::CopyFrom(const statistic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool statistic::IsInitialized() const {

  return true;
}

void statistic::Swap(statistic* other) {
  if (other != this) {
    std::swap(msgtotal_, other->msgtotal_);
    std::swap(msgerr_, other->msgerr_);
    std::swap(msgok_, other->msgok_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata statistic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = statistic_descriptor_;
  metadata.reflection = statistic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int taskHB::kTaskIdFieldNumber;
const int taskHB::kJobIdFieldNumber;
const int taskHB::kServerDesFieldNumber;
const int taskHB::kBusinessFieldNumber;
const int taskHB::kStatusFieldNumber;
const int taskHB::kStatFieldNumber;
const int taskHB::kSplitsFieldNumber;
#endif  // !_MSC_VER

taskHB::taskHB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void taskHB::InitAsDefaultInstance() {
  stat_ = const_cast< ::hummer::statistic*>(&::hummer::statistic::default_instance());
}

taskHB::taskHB(const taskHB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void taskHB::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  jobid_ = 0u;
  serverdes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  business_ = 0u;
  status_ = 0u;
  stat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

taskHB::~taskHB() {
  SharedDtor();
}

void taskHB::SharedDtor() {
  if (serverdes_ != &::google::protobuf::internal::kEmptyString) {
    delete serverdes_;
  }
  if (this != default_instance_) {
    delete stat_;
  }
}

void taskHB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* taskHB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return taskHB_descriptor_;
}

const taskHB& taskHB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_job_2eproto();
  return *default_instance_;
}

taskHB* taskHB::default_instance_ = NULL;

taskHB* taskHB::New() const {
  return new taskHB;
}

void taskHB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
    jobid_ = 0u;
    if (has_serverdes()) {
      if (serverdes_ != &::google::protobuf::internal::kEmptyString) {
        serverdes_->clear();
      }
    }
    business_ = 0u;
    status_ = 0u;
    if (has_stat()) {
      if (stat_ != NULL) stat_->::hummer::statistic::Clear();
    }
  }
  splits_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool taskHB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 taskId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_jobId;
        break;
      }

      // required uint32 jobId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jobId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jobid_)));
          set_has_jobid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_serverDes;
        break;
      }

      // required string serverDes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverDes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverdes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serverdes().data(), this->serverdes().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_business;
        break;
      }

      // required uint32 business = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_business:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &business_)));
          set_has_business();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // required uint32 status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_stat;
        break;
      }

      // optional .hummer.statistic stat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_splits;
        break;
      }

      // repeated .hummer.split splits = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_splits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_splits()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_splits;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void taskHB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 taskId = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  // required uint32 jobId = 2;
  if (has_jobid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->jobid(), output);
  }

  // required string serverDes = 3;
  if (has_serverdes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverdes().data(), this->serverdes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->serverdes(), output);
  }

  // required uint32 business = 4;
  if (has_business()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->business(), output);
  }

  // required uint32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->status(), output);
  }

  // optional .hummer.statistic stat = 6;
  if (has_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->stat(), output);
  }

  // repeated .hummer.split splits = 7;
  for (int i = 0; i < this->splits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->splits(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* taskHB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 taskId = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  // required uint32 jobId = 2;
  if (has_jobid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->jobid(), target);
  }

  // required string serverDes = 3;
  if (has_serverdes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverdes().data(), this->serverdes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->serverdes(), target);
  }

  // required uint32 business = 4;
  if (has_business()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->business(), target);
  }

  // required uint32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->status(), target);
  }

  // optional .hummer.statistic stat = 6;
  if (has_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->stat(), target);
  }

  // repeated .hummer.split splits = 7;
  for (int i = 0; i < this->splits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->splits(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int taskHB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 taskId = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

    // required uint32 jobId = 2;
    if (has_jobid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jobid());
    }

    // required string serverDes = 3;
    if (has_serverdes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverdes());
    }

    // required uint32 business = 4;
    if (has_business()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->business());
    }

    // required uint32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional .hummer.statistic stat = 6;
    if (has_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stat());
    }

  }
  // repeated .hummer.split splits = 7;
  total_size += 1 * this->splits_size();
  for (int i = 0; i < this->splits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->splits(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void taskHB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const taskHB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const taskHB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void taskHB::MergeFrom(const taskHB& from) {
  GOOGLE_CHECK_NE(&from, this);
  splits_.MergeFrom(from.splits_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_jobid()) {
      set_jobid(from.jobid());
    }
    if (from.has_serverdes()) {
      set_serverdes(from.serverdes());
    }
    if (from.has_business()) {
      set_business(from.business());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_stat()) {
      mutable_stat()->::hummer::statistic::MergeFrom(from.stat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void taskHB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void taskHB::CopyFrom(const taskHB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool taskHB::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void taskHB::Swap(taskHB* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(jobid_, other->jobid_);
    std::swap(serverdes_, other->serverdes_);
    std::swap(business_, other->business_);
    std::swap(status_, other->status_);
    std::swap(stat_, other->stat_);
    splits_.Swap(&other->splits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata taskHB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = taskHB_descriptor_;
  metadata.reflection = taskHB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int task::kTaskIdFieldNumber;
const int task::kTaskTypeFieldNumber;
const int task::kJobIdFieldNumber;
const int task::kBusinessFieldNumber;
const int task::kServerDesFieldNumber;
const int task::kSlotFieldNumber;
const int task::kSrcDesFieldNumber;
const int task::kDstDesFieldNumber;
const int task::kSplitsFieldNumber;
#endif  // !_MSC_VER

task::task()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void task::InitAsDefaultInstance() {
}

task::task(const task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void task::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = GOOGLE_ULONGLONG(0);
  tasktype_ = 0u;
  jobid_ = GOOGLE_ULONGLONG(0);
  business_ = 0u;
  serverdes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  slot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

task::~task() {
  SharedDtor();
}

void task::SharedDtor() {
  if (serverdes_ != &::google::protobuf::internal::kEmptyString) {
    delete serverdes_;
  }
  if (slot_ != &::google::protobuf::internal::kEmptyString) {
    delete slot_;
  }
  if (this != default_instance_) {
  }
}

void task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return task_descriptor_;
}

const task& task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_job_2eproto();
  return *default_instance_;
}

task* task::default_instance_ = NULL;

task* task::New() const {
  return new task;
}

void task::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = GOOGLE_ULONGLONG(0);
    tasktype_ = 0u;
    jobid_ = GOOGLE_ULONGLONG(0);
    business_ = 0u;
    if (has_serverdes()) {
      if (serverdes_ != &::google::protobuf::internal::kEmptyString) {
        serverdes_->clear();
      }
    }
    if (has_slot()) {
      if (slot_ != &::google::protobuf::internal::kEmptyString) {
        slot_->clear();
      }
    }
  }
  srcdes_.Clear();
  dstdes_.Clear();
  splits_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 taskId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_taskType;
        break;
      }

      // required uint32 taskType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tasktype_)));
          set_has_tasktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_jobId;
        break;
      }

      // required uint64 jobId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jobId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &jobid_)));
          set_has_jobid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_business;
        break;
      }

      // optional uint32 business = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_business:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &business_)));
          set_has_business();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_serverDes;
        break;
      }

      // optional string serverDes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverDes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverdes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serverdes().data(), this->serverdes().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_slot;
        break;
      }

      // optional string slot = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->slot().data(), this->slot().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_srcDes;
        break;
      }

      // repeated string srcDes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_srcDes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_srcdes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->srcdes(this->srcdes_size() - 1).data(),
            this->srcdes(this->srcdes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_srcDes;
        if (input->ExpectTag(74)) goto parse_dstDes;
        break;
      }

      // repeated string dstDes = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dstDes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dstdes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dstdes(this->dstdes_size() - 1).data(),
            this->dstdes(this->dstdes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_dstDes;
        if (input->ExpectTag(82)) goto parse_splits;
        break;
      }

      // repeated .hummer.split splits = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_splits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_splits()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_splits;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 taskId = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->taskid(), output);
  }

  // required uint32 taskType = 2;
  if (has_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tasktype(), output);
  }

  // required uint64 jobId = 3;
  if (has_jobid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->jobid(), output);
  }

  // optional uint32 business = 5;
  if (has_business()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->business(), output);
  }

  // optional string serverDes = 6;
  if (has_serverdes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverdes().data(), this->serverdes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->serverdes(), output);
  }

  // optional string slot = 7;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->slot().data(), this->slot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->slot(), output);
  }

  // repeated string srcDes = 8;
  for (int i = 0; i < this->srcdes_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->srcdes(i).data(), this->srcdes(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->srcdes(i), output);
  }

  // repeated string dstDes = 9;
  for (int i = 0; i < this->dstdes_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->dstdes(i).data(), this->dstdes(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->dstdes(i), output);
  }

  // repeated .hummer.split splits = 10;
  for (int i = 0; i < this->splits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->splits(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 taskId = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->taskid(), target);
  }

  // required uint32 taskType = 2;
  if (has_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tasktype(), target);
  }

  // required uint64 jobId = 3;
  if (has_jobid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->jobid(), target);
  }

  // optional uint32 business = 5;
  if (has_business()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->business(), target);
  }

  // optional string serverDes = 6;
  if (has_serverdes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverdes().data(), this->serverdes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->serverdes(), target);
  }

  // optional string slot = 7;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->slot().data(), this->slot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->slot(), target);
  }

  // repeated string srcDes = 8;
  for (int i = 0; i < this->srcdes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srcdes(i).data(), this->srcdes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->srcdes(i), target);
  }

  // repeated string dstDes = 9;
  for (int i = 0; i < this->dstdes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dstdes(i).data(), this->dstdes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->dstdes(i), target);
  }

  // repeated .hummer.split splits = 10;
  for (int i = 0; i < this->splits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->splits(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int task::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 taskId = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->taskid());
    }

    // required uint32 taskType = 2;
    if (has_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tasktype());
    }

    // required uint64 jobId = 3;
    if (has_jobid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->jobid());
    }

    // optional uint32 business = 5;
    if (has_business()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->business());
    }

    // optional string serverDes = 6;
    if (has_serverdes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverdes());
    }

    // optional string slot = 7;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->slot());
    }

  }
  // repeated string srcDes = 8;
  total_size += 1 * this->srcdes_size();
  for (int i = 0; i < this->srcdes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->srcdes(i));
  }

  // repeated string dstDes = 9;
  total_size += 1 * this->dstdes_size();
  for (int i = 0; i < this->dstdes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dstdes(i));
  }

  // repeated .hummer.split splits = 10;
  total_size += 1 * this->splits_size();
  for (int i = 0; i < this->splits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->splits(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void task::MergeFrom(const task& from) {
  GOOGLE_CHECK_NE(&from, this);
  srcdes_.MergeFrom(from.srcdes_);
  dstdes_.MergeFrom(from.dstdes_);
  splits_.MergeFrom(from.splits_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_tasktype()) {
      set_tasktype(from.tasktype());
    }
    if (from.has_jobid()) {
      set_jobid(from.jobid());
    }
    if (from.has_business()) {
      set_business(from.business());
    }
    if (from.has_serverdes()) {
      set_serverdes(from.serverdes());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void task::CopyFrom(const task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool task::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void task::Swap(task* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(tasktype_, other->tasktype_);
    std::swap(jobid_, other->jobid_);
    std::swap(business_, other->business_);
    std::swap(serverdes_, other->serverdes_);
    std::swap(slot_, other->slot_);
    srcdes_.Swap(&other->srcdes_);
    dstdes_.Swap(&other->dstdes_);
    splits_.Swap(&other->splits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = task_descriptor_;
  metadata.reflection = task_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int assignment::kTidFieldNumber;
const int assignment::kSplitFieldNumber;
const int assignment::kFiniFlagFieldNumber;
#endif  // !_MSC_VER

assignment::assignment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void assignment::InitAsDefaultInstance() {
}

assignment::assignment(const assignment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void assignment::SharedCtor() {
  _cached_size_ = 0;
  tid_ = GOOGLE_ULONGLONG(0);
  split_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  finiflag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

assignment::~assignment() {
  SharedDtor();
}

void assignment::SharedDtor() {
  if (split_ != &::google::protobuf::internal::kEmptyString) {
    delete split_;
  }
  if (this != default_instance_) {
  }
}

void assignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* assignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return assignment_descriptor_;
}

const assignment& assignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_job_2eproto();
  return *default_instance_;
}

assignment* assignment::default_instance_ = NULL;

assignment* assignment::New() const {
  return new assignment;
}

void assignment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tid_ = GOOGLE_ULONGLONG(0);
    if (has_split()) {
      if (split_ != &::google::protobuf::internal::kEmptyString) {
        split_->clear();
      }
    }
    finiflag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool assignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 tid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_split;
        break;
      }

      // optional string split = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_split:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_split()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->split().data(), this->split().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_finiFlag;
        break;
      }

      // optional bool finiFlag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finiFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finiflag_)));
          set_has_finiflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void assignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tid(), output);
  }

  // optional string split = 2;
  if (has_split()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->split().data(), this->split().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->split(), output);
  }

  // optional bool finiFlag = 3;
  if (has_finiflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->finiflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* assignment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tid(), target);
  }

  // optional string split = 2;
  if (has_split()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->split().data(), this->split().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->split(), target);
  }

  // optional bool finiFlag = 3;
  if (has_finiflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->finiflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int assignment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tid());
    }

    // optional string split = 2;
    if (has_split()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->split());
    }

    // optional bool finiFlag = 3;
    if (has_finiflag()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void assignment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const assignment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const assignment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void assignment::MergeFrom(const assignment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_split()) {
      set_split(from.split());
    }
    if (from.has_finiflag()) {
      set_finiflag(from.finiflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void assignment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void assignment::CopyFrom(const assignment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool assignment::IsInitialized() const {

  return true;
}

void assignment::Swap(assignment* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(split_, other->split_);
    std::swap(finiflag_, other->finiflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata assignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = assignment_descriptor_;
  metadata.reflection = assignment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int job::kJobDesFieldNumber;
const int job::kJobIdFieldNumber;
const int job::kJobTypeFieldNumber;
const int job::kJobStatusFieldNumber;
const int job::kBusinessFieldNumber;
const int job::kCpucoreFieldNumber;
const int job::kSrcDesFieldNumber;
const int job::kDstDesFieldNumber;
const int job::kSplitsFieldNumber;
const int job::kAssignsFieldNumber;
#endif  // !_MSC_VER

job::job()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void job::InitAsDefaultInstance() {
}

job::job(const job& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void job::SharedCtor() {
  _cached_size_ = 0;
  jobdes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  jobid_ = GOOGLE_ULONGLONG(0);
  jobtype_ = 0u;
  jobstatus_ = 0u;
  business_ = 0u;
  cpucore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

job::~job() {
  SharedDtor();
}

void job::SharedDtor() {
  if (jobdes_ != &::google::protobuf::internal::kEmptyString) {
    delete jobdes_;
  }
  if (this != default_instance_) {
  }
}

void job::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* job::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return job_descriptor_;
}

const job& job::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_job_2eproto();
  return *default_instance_;
}

job* job::default_instance_ = NULL;

job* job::New() const {
  return new job;
}

void job::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_jobdes()) {
      if (jobdes_ != &::google::protobuf::internal::kEmptyString) {
        jobdes_->clear();
      }
    }
    jobid_ = GOOGLE_ULONGLONG(0);
    jobtype_ = 0u;
    jobstatus_ = 0u;
    business_ = 0u;
    cpucore_ = 0u;
  }
  srcdes_.Clear();
  dstdes_.Clear();
  splits_.Clear();
  assigns_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool job::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string jobDes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jobdes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jobdes().data(), this->jobdes().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_jobId;
        break;
      }

      // required uint64 jobId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jobId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &jobid_)));
          set_has_jobid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_jobType;
        break;
      }

      // required uint32 jobType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jobType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jobtype_)));
          set_has_jobtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_jobStatus;
        break;
      }

      // required uint32 jobStatus = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jobStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jobstatus_)));
          set_has_jobstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_business;
        break;
      }

      // optional uint32 business = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_business:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &business_)));
          set_has_business();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cpucore;
        break;
      }

      // optional uint32 cpucore = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpucore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpucore_)));
          set_has_cpucore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_srcDes;
        break;
      }

      // repeated string srcDes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_srcDes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_srcdes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->srcdes(this->srcdes_size() - 1).data(),
            this->srcdes(this->srcdes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_srcDes;
        if (input->ExpectTag(66)) goto parse_dstDes;
        break;
      }

      // repeated string dstDes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dstDes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dstdes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dstdes(this->dstdes_size() - 1).data(),
            this->dstdes(this->dstdes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_dstDes;
        if (input->ExpectTag(74)) goto parse_splits;
        break;
      }

      // repeated .hummer.split splits = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_splits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_splits()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_splits;
        if (input->ExpectTag(82)) goto parse_assigns;
        break;
      }

      // repeated .hummer.assignment assigns = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_assigns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_assigns()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_assigns;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void job::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string jobDes = 1;
  if (has_jobdes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jobdes().data(), this->jobdes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->jobdes(), output);
  }

  // required uint64 jobId = 2;
  if (has_jobid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->jobid(), output);
  }

  // required uint32 jobType = 3;
  if (has_jobtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->jobtype(), output);
  }

  // required uint32 jobStatus = 4;
  if (has_jobstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->jobstatus(), output);
  }

  // optional uint32 business = 5;
  if (has_business()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->business(), output);
  }

  // optional uint32 cpucore = 6;
  if (has_cpucore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->cpucore(), output);
  }

  // repeated string srcDes = 7;
  for (int i = 0; i < this->srcdes_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->srcdes(i).data(), this->srcdes(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->srcdes(i), output);
  }

  // repeated string dstDes = 8;
  for (int i = 0; i < this->dstdes_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->dstdes(i).data(), this->dstdes(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->dstdes(i), output);
  }

  // repeated .hummer.split splits = 9;
  for (int i = 0; i < this->splits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->splits(i), output);
  }

  // repeated .hummer.assignment assigns = 10;
  for (int i = 0; i < this->assigns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->assigns(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* job::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string jobDes = 1;
  if (has_jobdes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jobdes().data(), this->jobdes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->jobdes(), target);
  }

  // required uint64 jobId = 2;
  if (has_jobid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->jobid(), target);
  }

  // required uint32 jobType = 3;
  if (has_jobtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->jobtype(), target);
  }

  // required uint32 jobStatus = 4;
  if (has_jobstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->jobstatus(), target);
  }

  // optional uint32 business = 5;
  if (has_business()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->business(), target);
  }

  // optional uint32 cpucore = 6;
  if (has_cpucore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->cpucore(), target);
  }

  // repeated string srcDes = 7;
  for (int i = 0; i < this->srcdes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srcdes(i).data(), this->srcdes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->srcdes(i), target);
  }

  // repeated string dstDes = 8;
  for (int i = 0; i < this->dstdes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dstdes(i).data(), this->dstdes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->dstdes(i), target);
  }

  // repeated .hummer.split splits = 9;
  for (int i = 0; i < this->splits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->splits(i), target);
  }

  // repeated .hummer.assignment assigns = 10;
  for (int i = 0; i < this->assigns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->assigns(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int job::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string jobDes = 1;
    if (has_jobdes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jobdes());
    }

    // required uint64 jobId = 2;
    if (has_jobid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->jobid());
    }

    // required uint32 jobType = 3;
    if (has_jobtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jobtype());
    }

    // required uint32 jobStatus = 4;
    if (has_jobstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jobstatus());
    }

    // optional uint32 business = 5;
    if (has_business()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->business());
    }

    // optional uint32 cpucore = 6;
    if (has_cpucore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpucore());
    }

  }
  // repeated string srcDes = 7;
  total_size += 1 * this->srcdes_size();
  for (int i = 0; i < this->srcdes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->srcdes(i));
  }

  // repeated string dstDes = 8;
  total_size += 1 * this->dstdes_size();
  for (int i = 0; i < this->dstdes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dstdes(i));
  }

  // repeated .hummer.split splits = 9;
  total_size += 1 * this->splits_size();
  for (int i = 0; i < this->splits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->splits(i));
  }

  // repeated .hummer.assignment assigns = 10;
  total_size += 1 * this->assigns_size();
  for (int i = 0; i < this->assigns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->assigns(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void job::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const job* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const job*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void job::MergeFrom(const job& from) {
  GOOGLE_CHECK_NE(&from, this);
  srcdes_.MergeFrom(from.srcdes_);
  dstdes_.MergeFrom(from.dstdes_);
  splits_.MergeFrom(from.splits_);
  assigns_.MergeFrom(from.assigns_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jobdes()) {
      set_jobdes(from.jobdes());
    }
    if (from.has_jobid()) {
      set_jobid(from.jobid());
    }
    if (from.has_jobtype()) {
      set_jobtype(from.jobtype());
    }
    if (from.has_jobstatus()) {
      set_jobstatus(from.jobstatus());
    }
    if (from.has_business()) {
      set_business(from.business());
    }
    if (from.has_cpucore()) {
      set_cpucore(from.cpucore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void job::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void job::CopyFrom(const job& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool job::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void job::Swap(job* other) {
  if (other != this) {
    std::swap(jobdes_, other->jobdes_);
    std::swap(jobid_, other->jobid_);
    std::swap(jobtype_, other->jobtype_);
    std::swap(jobstatus_, other->jobstatus_);
    std::swap(business_, other->business_);
    std::swap(cpucore_, other->cpucore_);
    srcdes_.Swap(&other->srcdes_);
    dstdes_.Swap(&other->dstdes_);
    splits_.Swap(&other->splits_);
    assigns_.Swap(&other->assigns_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata job::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = job_descriptor_;
  metadata.reflection = job_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hummer

// @@protoc_insertion_point(global_scope)
