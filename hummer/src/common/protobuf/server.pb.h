// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto

#ifndef PROTOBUF_server_2eproto__INCLUDED
#define PROTOBUF_server_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace hummer {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_server_2eproto();
void protobuf_AssignDesc_server_2eproto();
void protobuf_ShutdownFile_server_2eproto();

class server;

// ===================================================================

class server : public ::google::protobuf::Message {
 public:
  server();
  virtual ~server();

  server(const server& from);

  inline server& operator=(const server& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const server& default_instance();

  void Swap(server* other);

  // implements Message ----------------------------------------------

  server* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const server& from);
  void MergeFrom(const server& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ServerDes = 1;
  inline bool has_serverdes() const;
  inline void clear_serverdes();
  static const int kServerDesFieldNumber = 1;
  inline const ::std::string& serverdes() const;
  inline void set_serverdes(const ::std::string& value);
  inline void set_serverdes(const char* value);
  inline void set_serverdes(const char* value, size_t size);
  inline ::std::string* mutable_serverdes();
  inline ::std::string* release_serverdes();
  inline void set_allocated_serverdes(::std::string* serverdes);

  // repeated uint32 SupportBuisness = 2;
  inline int supportbuisness_size() const;
  inline void clear_supportbuisness();
  static const int kSupportBuisnessFieldNumber = 2;
  inline ::google::protobuf::uint32 supportbuisness(int index) const;
  inline void set_supportbuisness(int index, ::google::protobuf::uint32 value);
  inline void add_supportbuisness(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      supportbuisness() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_supportbuisness();

  // optional uint32 ServerCpuCore = 3;
  inline bool has_servercpucore() const;
  inline void clear_servercpucore();
  static const int kServerCpuCoreFieldNumber = 3;
  inline ::google::protobuf::uint32 servercpucore() const;
  inline void set_servercpucore(::google::protobuf::uint32 value);

  // optional uint32 portUp = 4;
  inline bool has_portup() const;
  inline void clear_portup();
  static const int kPortUpFieldNumber = 4;
  inline ::google::protobuf::uint32 portup() const;
  inline void set_portup(::google::protobuf::uint32 value);

  // optional uint32 portDown = 5;
  inline bool has_portdown() const;
  inline void clear_portdown();
  static const int kPortDownFieldNumber = 5;
  inline ::google::protobuf::uint32 portdown() const;
  inline void set_portdown(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:hummer.server)
 private:
  inline void set_has_serverdes();
  inline void clear_has_serverdes();
  inline void set_has_servercpucore();
  inline void clear_has_servercpucore();
  inline void set_has_portup();
  inline void clear_has_portup();
  inline void set_has_portdown();
  inline void clear_has_portdown();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* serverdes_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > supportbuisness_;
  ::google::protobuf::uint32 servercpucore_;
  ::google::protobuf::uint32 portup_;
  ::google::protobuf::uint32 portdown_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static server* default_instance_;
};
// ===================================================================


// ===================================================================

// server

// required string ServerDes = 1;
inline bool server::has_serverdes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void server::set_has_serverdes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void server::clear_has_serverdes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void server::clear_serverdes() {
  if (serverdes_ != &::google::protobuf::internal::kEmptyString) {
    serverdes_->clear();
  }
  clear_has_serverdes();
}
inline const ::std::string& server::serverdes() const {
  return *serverdes_;
}
inline void server::set_serverdes(const ::std::string& value) {
  set_has_serverdes();
  if (serverdes_ == &::google::protobuf::internal::kEmptyString) {
    serverdes_ = new ::std::string;
  }
  serverdes_->assign(value);
}
inline void server::set_serverdes(const char* value) {
  set_has_serverdes();
  if (serverdes_ == &::google::protobuf::internal::kEmptyString) {
    serverdes_ = new ::std::string;
  }
  serverdes_->assign(value);
}
inline void server::set_serverdes(const char* value, size_t size) {
  set_has_serverdes();
  if (serverdes_ == &::google::protobuf::internal::kEmptyString) {
    serverdes_ = new ::std::string;
  }
  serverdes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* server::mutable_serverdes() {
  set_has_serverdes();
  if (serverdes_ == &::google::protobuf::internal::kEmptyString) {
    serverdes_ = new ::std::string;
  }
  return serverdes_;
}
inline ::std::string* server::release_serverdes() {
  clear_has_serverdes();
  if (serverdes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = serverdes_;
    serverdes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void server::set_allocated_serverdes(::std::string* serverdes) {
  if (serverdes_ != &::google::protobuf::internal::kEmptyString) {
    delete serverdes_;
  }
  if (serverdes) {
    set_has_serverdes();
    serverdes_ = serverdes;
  } else {
    clear_has_serverdes();
    serverdes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated uint32 SupportBuisness = 2;
inline int server::supportbuisness_size() const {
  return supportbuisness_.size();
}
inline void server::clear_supportbuisness() {
  supportbuisness_.Clear();
}
inline ::google::protobuf::uint32 server::supportbuisness(int index) const {
  return supportbuisness_.Get(index);
}
inline void server::set_supportbuisness(int index, ::google::protobuf::uint32 value) {
  supportbuisness_.Set(index, value);
}
inline void server::add_supportbuisness(::google::protobuf::uint32 value) {
  supportbuisness_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
server::supportbuisness() const {
  return supportbuisness_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
server::mutable_supportbuisness() {
  return &supportbuisness_;
}

// optional uint32 ServerCpuCore = 3;
inline bool server::has_servercpucore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void server::set_has_servercpucore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void server::clear_has_servercpucore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void server::clear_servercpucore() {
  servercpucore_ = 0u;
  clear_has_servercpucore();
}
inline ::google::protobuf::uint32 server::servercpucore() const {
  return servercpucore_;
}
inline void server::set_servercpucore(::google::protobuf::uint32 value) {
  set_has_servercpucore();
  servercpucore_ = value;
}

// optional uint32 portUp = 4;
inline bool server::has_portup() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void server::set_has_portup() {
  _has_bits_[0] |= 0x00000008u;
}
inline void server::clear_has_portup() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void server::clear_portup() {
  portup_ = 0u;
  clear_has_portup();
}
inline ::google::protobuf::uint32 server::portup() const {
  return portup_;
}
inline void server::set_portup(::google::protobuf::uint32 value) {
  set_has_portup();
  portup_ = value;
}

// optional uint32 portDown = 5;
inline bool server::has_portdown() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void server::set_has_portdown() {
  _has_bits_[0] |= 0x00000010u;
}
inline void server::clear_has_portdown() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void server::clear_portdown() {
  portdown_ = 0u;
  clear_has_portdown();
}
inline ::google::protobuf::uint32 server::portdown() const {
  return portdown_;
}
inline void server::set_portdown(::google::protobuf::uint32 value) {
  set_has_portdown();
  portdown_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hummer

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_server_2eproto__INCLUDED
