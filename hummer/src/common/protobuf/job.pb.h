// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: job.proto

#ifndef PROTOBUF_job_2eproto__INCLUDED
#define PROTOBUF_job_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace hummer {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_job_2eproto();
void protobuf_AssignDesc_job_2eproto();
void protobuf_ShutdownFile_job_2eproto();

class split;
class statistic;
class taskHB;
class task;
class assignment;
class job;

// ===================================================================

class split : public ::google::protobuf::Message {
 public:
  split();
  virtual ~split();

  split(const split& from);

  inline split& operator=(const split& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const split& default_instance();

  void Swap(split* other);

  // implements Message ----------------------------------------------

  split* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const split& from);
  void MergeFrom(const split& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional string sId = 2;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSIdFieldNumber = 2;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  inline ::std::string* release_sid();
  inline void set_allocated_sid(::std::string* sid);

  // optional string sValue = 3;
  inline bool has_svalue() const;
  inline void clear_svalue();
  static const int kSValueFieldNumber = 3;
  inline const ::std::string& svalue() const;
  inline void set_svalue(const ::std::string& value);
  inline void set_svalue(const char* value);
  inline void set_svalue(const char* value, size_t size);
  inline ::std::string* mutable_svalue();
  inline ::std::string* release_svalue();
  inline void set_allocated_svalue(::std::string* svalue);

  // @@protoc_insertion_point(class_scope:hummer.split)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_svalue();
  inline void clear_has_svalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sid_;
  ::std::string* svalue_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_job_2eproto();
  friend void protobuf_AssignDesc_job_2eproto();
  friend void protobuf_ShutdownFile_job_2eproto();

  void InitAsDefaultInstance();
  static split* default_instance_;
};
// -------------------------------------------------------------------

class statistic : public ::google::protobuf::Message {
 public:
  statistic();
  virtual ~statistic();

  statistic(const statistic& from);

  inline statistic& operator=(const statistic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const statistic& default_instance();

  void Swap(statistic* other);

  // implements Message ----------------------------------------------

  statistic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const statistic& from);
  void MergeFrom(const statistic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 msgTotal = 1;
  inline bool has_msgtotal() const;
  inline void clear_msgtotal();
  static const int kMsgTotalFieldNumber = 1;
  inline ::google::protobuf::uint64 msgtotal() const;
  inline void set_msgtotal(::google::protobuf::uint64 value);

  // optional uint64 msgErr = 2;
  inline bool has_msgerr() const;
  inline void clear_msgerr();
  static const int kMsgErrFieldNumber = 2;
  inline ::google::protobuf::uint64 msgerr() const;
  inline void set_msgerr(::google::protobuf::uint64 value);

  // optional uint64 msgOk = 3;
  inline bool has_msgok() const;
  inline void clear_msgok();
  static const int kMsgOkFieldNumber = 3;
  inline ::google::protobuf::uint64 msgok() const;
  inline void set_msgok(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:hummer.statistic)
 private:
  inline void set_has_msgtotal();
  inline void clear_has_msgtotal();
  inline void set_has_msgerr();
  inline void clear_has_msgerr();
  inline void set_has_msgok();
  inline void clear_has_msgok();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 msgtotal_;
  ::google::protobuf::uint64 msgerr_;
  ::google::protobuf::uint64 msgok_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_job_2eproto();
  friend void protobuf_AssignDesc_job_2eproto();
  friend void protobuf_ShutdownFile_job_2eproto();

  void InitAsDefaultInstance();
  static statistic* default_instance_;
};
// -------------------------------------------------------------------

class taskHB : public ::google::protobuf::Message {
 public:
  taskHB();
  virtual ~taskHB();

  taskHB(const taskHB& from);

  inline taskHB& operator=(const taskHB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const taskHB& default_instance();

  void Swap(taskHB* other);

  // implements Message ----------------------------------------------

  taskHB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const taskHB& from);
  void MergeFrom(const taskHB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 taskId = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // required uint32 jobId = 2;
  inline bool has_jobid() const;
  inline void clear_jobid();
  static const int kJobIdFieldNumber = 2;
  inline ::google::protobuf::uint32 jobid() const;
  inline void set_jobid(::google::protobuf::uint32 value);

  // required string serverDes = 3;
  inline bool has_serverdes() const;
  inline void clear_serverdes();
  static const int kServerDesFieldNumber = 3;
  inline const ::std::string& serverdes() const;
  inline void set_serverdes(const ::std::string& value);
  inline void set_serverdes(const char* value);
  inline void set_serverdes(const char* value, size_t size);
  inline ::std::string* mutable_serverdes();
  inline ::std::string* release_serverdes();
  inline void set_allocated_serverdes(::std::string* serverdes);

  // required uint32 business = 4;
  inline bool has_business() const;
  inline void clear_business();
  static const int kBusinessFieldNumber = 4;
  inline ::google::protobuf::uint32 business() const;
  inline void set_business(::google::protobuf::uint32 value);

  // required uint32 status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // optional .hummer.statistic stat = 6;
  inline bool has_stat() const;
  inline void clear_stat();
  static const int kStatFieldNumber = 6;
  inline const ::hummer::statistic& stat() const;
  inline ::hummer::statistic* mutable_stat();
  inline ::hummer::statistic* release_stat();
  inline void set_allocated_stat(::hummer::statistic* stat);

  // repeated .hummer.split splits = 7;
  inline int splits_size() const;
  inline void clear_splits();
  static const int kSplitsFieldNumber = 7;
  inline const ::hummer::split& splits(int index) const;
  inline ::hummer::split* mutable_splits(int index);
  inline ::hummer::split* add_splits();
  inline const ::google::protobuf::RepeatedPtrField< ::hummer::split >&
      splits() const;
  inline ::google::protobuf::RepeatedPtrField< ::hummer::split >*
      mutable_splits();

  // @@protoc_insertion_point(class_scope:hummer.taskHB)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_jobid();
  inline void clear_has_jobid();
  inline void set_has_serverdes();
  inline void clear_has_serverdes();
  inline void set_has_business();
  inline void clear_has_business();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_stat();
  inline void clear_has_stat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 taskid_;
  ::google::protobuf::uint32 jobid_;
  ::std::string* serverdes_;
  ::google::protobuf::uint32 business_;
  ::google::protobuf::uint32 status_;
  ::hummer::statistic* stat_;
  ::google::protobuf::RepeatedPtrField< ::hummer::split > splits_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_job_2eproto();
  friend void protobuf_AssignDesc_job_2eproto();
  friend void protobuf_ShutdownFile_job_2eproto();

  void InitAsDefaultInstance();
  static taskHB* default_instance_;
};
// -------------------------------------------------------------------

class task : public ::google::protobuf::Message {
 public:
  task();
  virtual ~task();

  task(const task& from);

  inline task& operator=(const task& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const task& default_instance();

  void Swap(task* other);

  // implements Message ----------------------------------------------

  task* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const task& from);
  void MergeFrom(const task& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 taskId = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::protobuf::uint64 taskid() const;
  inline void set_taskid(::google::protobuf::uint64 value);

  // required uint32 taskType = 2;
  inline bool has_tasktype() const;
  inline void clear_tasktype();
  static const int kTaskTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 tasktype() const;
  inline void set_tasktype(::google::protobuf::uint32 value);

  // required uint64 jobId = 3;
  inline bool has_jobid() const;
  inline void clear_jobid();
  static const int kJobIdFieldNumber = 3;
  inline ::google::protobuf::uint64 jobid() const;
  inline void set_jobid(::google::protobuf::uint64 value);

  // optional uint32 business = 5;
  inline bool has_business() const;
  inline void clear_business();
  static const int kBusinessFieldNumber = 5;
  inline ::google::protobuf::uint32 business() const;
  inline void set_business(::google::protobuf::uint32 value);

  // optional string serverDes = 6;
  inline bool has_serverdes() const;
  inline void clear_serverdes();
  static const int kServerDesFieldNumber = 6;
  inline const ::std::string& serverdes() const;
  inline void set_serverdes(const ::std::string& value);
  inline void set_serverdes(const char* value);
  inline void set_serverdes(const char* value, size_t size);
  inline ::std::string* mutable_serverdes();
  inline ::std::string* release_serverdes();
  inline void set_allocated_serverdes(::std::string* serverdes);

  // optional string slot = 7;
  inline bool has_slot() const;
  inline void clear_slot();
  static const int kSlotFieldNumber = 7;
  inline const ::std::string& slot() const;
  inline void set_slot(const ::std::string& value);
  inline void set_slot(const char* value);
  inline void set_slot(const char* value, size_t size);
  inline ::std::string* mutable_slot();
  inline ::std::string* release_slot();
  inline void set_allocated_slot(::std::string* slot);

  // repeated string srcDes = 8;
  inline int srcdes_size() const;
  inline void clear_srcdes();
  static const int kSrcDesFieldNumber = 8;
  inline const ::std::string& srcdes(int index) const;
  inline ::std::string* mutable_srcdes(int index);
  inline void set_srcdes(int index, const ::std::string& value);
  inline void set_srcdes(int index, const char* value);
  inline void set_srcdes(int index, const char* value, size_t size);
  inline ::std::string* add_srcdes();
  inline void add_srcdes(const ::std::string& value);
  inline void add_srcdes(const char* value);
  inline void add_srcdes(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& srcdes() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_srcdes();

  // repeated string dstDes = 9;
  inline int dstdes_size() const;
  inline void clear_dstdes();
  static const int kDstDesFieldNumber = 9;
  inline const ::std::string& dstdes(int index) const;
  inline ::std::string* mutable_dstdes(int index);
  inline void set_dstdes(int index, const ::std::string& value);
  inline void set_dstdes(int index, const char* value);
  inline void set_dstdes(int index, const char* value, size_t size);
  inline ::std::string* add_dstdes();
  inline void add_dstdes(const ::std::string& value);
  inline void add_dstdes(const char* value);
  inline void add_dstdes(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& dstdes() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_dstdes();

  // repeated .hummer.split splits = 10;
  inline int splits_size() const;
  inline void clear_splits();
  static const int kSplitsFieldNumber = 10;
  inline const ::hummer::split& splits(int index) const;
  inline ::hummer::split* mutable_splits(int index);
  inline ::hummer::split* add_splits();
  inline const ::google::protobuf::RepeatedPtrField< ::hummer::split >&
      splits() const;
  inline ::google::protobuf::RepeatedPtrField< ::hummer::split >*
      mutable_splits();

  // @@protoc_insertion_point(class_scope:hummer.task)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_tasktype();
  inline void clear_has_tasktype();
  inline void set_has_jobid();
  inline void clear_has_jobid();
  inline void set_has_business();
  inline void clear_has_business();
  inline void set_has_serverdes();
  inline void clear_has_serverdes();
  inline void set_has_slot();
  inline void clear_has_slot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 taskid_;
  ::google::protobuf::uint64 jobid_;
  ::google::protobuf::uint32 tasktype_;
  ::google::protobuf::uint32 business_;
  ::std::string* serverdes_;
  ::std::string* slot_;
  ::google::protobuf::RepeatedPtrField< ::std::string> srcdes_;
  ::google::protobuf::RepeatedPtrField< ::std::string> dstdes_;
  ::google::protobuf::RepeatedPtrField< ::hummer::split > splits_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_job_2eproto();
  friend void protobuf_AssignDesc_job_2eproto();
  friend void protobuf_ShutdownFile_job_2eproto();

  void InitAsDefaultInstance();
  static task* default_instance_;
};
// -------------------------------------------------------------------

class assignment : public ::google::protobuf::Message {
 public:
  assignment();
  virtual ~assignment();

  assignment(const assignment& from);

  inline assignment& operator=(const assignment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const assignment& default_instance();

  void Swap(assignment* other);

  // implements Message ----------------------------------------------

  assignment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const assignment& from);
  void MergeFrom(const assignment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 tid = 1;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 1;
  inline ::google::protobuf::uint64 tid() const;
  inline void set_tid(::google::protobuf::uint64 value);

  // optional string split = 2;
  inline bool has_split() const;
  inline void clear_split();
  static const int kSplitFieldNumber = 2;
  inline const ::std::string& split() const;
  inline void set_split(const ::std::string& value);
  inline void set_split(const char* value);
  inline void set_split(const char* value, size_t size);
  inline ::std::string* mutable_split();
  inline ::std::string* release_split();
  inline void set_allocated_split(::std::string* split);

  // optional bool finiFlag = 3;
  inline bool has_finiflag() const;
  inline void clear_finiflag();
  static const int kFiniFlagFieldNumber = 3;
  inline bool finiflag() const;
  inline void set_finiflag(bool value);

  // @@protoc_insertion_point(class_scope:hummer.assignment)
 private:
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_split();
  inline void clear_has_split();
  inline void set_has_finiflag();
  inline void clear_has_finiflag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 tid_;
  ::std::string* split_;
  bool finiflag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_job_2eproto();
  friend void protobuf_AssignDesc_job_2eproto();
  friend void protobuf_ShutdownFile_job_2eproto();

  void InitAsDefaultInstance();
  static assignment* default_instance_;
};
// -------------------------------------------------------------------

class job : public ::google::protobuf::Message {
 public:
  job();
  virtual ~job();

  job(const job& from);

  inline job& operator=(const job& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const job& default_instance();

  void Swap(job* other);

  // implements Message ----------------------------------------------

  job* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const job& from);
  void MergeFrom(const job& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string jobDes = 1;
  inline bool has_jobdes() const;
  inline void clear_jobdes();
  static const int kJobDesFieldNumber = 1;
  inline const ::std::string& jobdes() const;
  inline void set_jobdes(const ::std::string& value);
  inline void set_jobdes(const char* value);
  inline void set_jobdes(const char* value, size_t size);
  inline ::std::string* mutable_jobdes();
  inline ::std::string* release_jobdes();
  inline void set_allocated_jobdes(::std::string* jobdes);

  // required uint64 jobId = 2;
  inline bool has_jobid() const;
  inline void clear_jobid();
  static const int kJobIdFieldNumber = 2;
  inline ::google::protobuf::uint64 jobid() const;
  inline void set_jobid(::google::protobuf::uint64 value);

  // required uint32 jobType = 3;
  inline bool has_jobtype() const;
  inline void clear_jobtype();
  static const int kJobTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 jobtype() const;
  inline void set_jobtype(::google::protobuf::uint32 value);

  // required uint32 jobStatus = 4;
  inline bool has_jobstatus() const;
  inline void clear_jobstatus();
  static const int kJobStatusFieldNumber = 4;
  inline ::google::protobuf::uint32 jobstatus() const;
  inline void set_jobstatus(::google::protobuf::uint32 value);

  // optional uint32 business = 5;
  inline bool has_business() const;
  inline void clear_business();
  static const int kBusinessFieldNumber = 5;
  inline ::google::protobuf::uint32 business() const;
  inline void set_business(::google::protobuf::uint32 value);

  // optional uint32 cpucore = 6;
  inline bool has_cpucore() const;
  inline void clear_cpucore();
  static const int kCpucoreFieldNumber = 6;
  inline ::google::protobuf::uint32 cpucore() const;
  inline void set_cpucore(::google::protobuf::uint32 value);

  // repeated string srcDes = 7;
  inline int srcdes_size() const;
  inline void clear_srcdes();
  static const int kSrcDesFieldNumber = 7;
  inline const ::std::string& srcdes(int index) const;
  inline ::std::string* mutable_srcdes(int index);
  inline void set_srcdes(int index, const ::std::string& value);
  inline void set_srcdes(int index, const char* value);
  inline void set_srcdes(int index, const char* value, size_t size);
  inline ::std::string* add_srcdes();
  inline void add_srcdes(const ::std::string& value);
  inline void add_srcdes(const char* value);
  inline void add_srcdes(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& srcdes() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_srcdes();

  // repeated string dstDes = 8;
  inline int dstdes_size() const;
  inline void clear_dstdes();
  static const int kDstDesFieldNumber = 8;
  inline const ::std::string& dstdes(int index) const;
  inline ::std::string* mutable_dstdes(int index);
  inline void set_dstdes(int index, const ::std::string& value);
  inline void set_dstdes(int index, const char* value);
  inline void set_dstdes(int index, const char* value, size_t size);
  inline ::std::string* add_dstdes();
  inline void add_dstdes(const ::std::string& value);
  inline void add_dstdes(const char* value);
  inline void add_dstdes(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& dstdes() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_dstdes();

  // repeated .hummer.split splits = 9;
  inline int splits_size() const;
  inline void clear_splits();
  static const int kSplitsFieldNumber = 9;
  inline const ::hummer::split& splits(int index) const;
  inline ::hummer::split* mutable_splits(int index);
  inline ::hummer::split* add_splits();
  inline const ::google::protobuf::RepeatedPtrField< ::hummer::split >&
      splits() const;
  inline ::google::protobuf::RepeatedPtrField< ::hummer::split >*
      mutable_splits();

  // repeated .hummer.assignment assigns = 10;
  inline int assigns_size() const;
  inline void clear_assigns();
  static const int kAssignsFieldNumber = 10;
  inline const ::hummer::assignment& assigns(int index) const;
  inline ::hummer::assignment* mutable_assigns(int index);
  inline ::hummer::assignment* add_assigns();
  inline const ::google::protobuf::RepeatedPtrField< ::hummer::assignment >&
      assigns() const;
  inline ::google::protobuf::RepeatedPtrField< ::hummer::assignment >*
      mutable_assigns();

  // @@protoc_insertion_point(class_scope:hummer.job)
 private:
  inline void set_has_jobdes();
  inline void clear_has_jobdes();
  inline void set_has_jobid();
  inline void clear_has_jobid();
  inline void set_has_jobtype();
  inline void clear_has_jobtype();
  inline void set_has_jobstatus();
  inline void clear_has_jobstatus();
  inline void set_has_business();
  inline void clear_has_business();
  inline void set_has_cpucore();
  inline void clear_has_cpucore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* jobdes_;
  ::google::protobuf::uint64 jobid_;
  ::google::protobuf::uint32 jobtype_;
  ::google::protobuf::uint32 jobstatus_;
  ::google::protobuf::uint32 business_;
  ::google::protobuf::uint32 cpucore_;
  ::google::protobuf::RepeatedPtrField< ::std::string> srcdes_;
  ::google::protobuf::RepeatedPtrField< ::std::string> dstdes_;
  ::google::protobuf::RepeatedPtrField< ::hummer::split > splits_;
  ::google::protobuf::RepeatedPtrField< ::hummer::assignment > assigns_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_job_2eproto();
  friend void protobuf_AssignDesc_job_2eproto();
  friend void protobuf_ShutdownFile_job_2eproto();

  void InitAsDefaultInstance();
  static job* default_instance_;
};
// ===================================================================


// ===================================================================

// split

// optional int32 type = 1;
inline bool split::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void split::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void split::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void split::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 split::type() const {
  return type_;
}
inline void split::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string sId = 2;
inline bool split::has_sid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void split::set_has_sid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void split::clear_has_sid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void split::clear_sid() {
  if (sid_ != &::google::protobuf::internal::kEmptyString) {
    sid_->clear();
  }
  clear_has_sid();
}
inline const ::std::string& split::sid() const {
  return *sid_;
}
inline void split::set_sid(const ::std::string& value) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void split::set_sid(const char* value) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void split::set_sid(const char* value, size_t size) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* split::mutable_sid() {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  return sid_;
}
inline ::std::string* split::release_sid() {
  clear_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sid_;
    sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void split::set_allocated_sid(::std::string* sid) {
  if (sid_ != &::google::protobuf::internal::kEmptyString) {
    delete sid_;
  }
  if (sid) {
    set_has_sid();
    sid_ = sid;
  } else {
    clear_has_sid();
    sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sValue = 3;
inline bool split::has_svalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void split::set_has_svalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void split::clear_has_svalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void split::clear_svalue() {
  if (svalue_ != &::google::protobuf::internal::kEmptyString) {
    svalue_->clear();
  }
  clear_has_svalue();
}
inline const ::std::string& split::svalue() const {
  return *svalue_;
}
inline void split::set_svalue(const ::std::string& value) {
  set_has_svalue();
  if (svalue_ == &::google::protobuf::internal::kEmptyString) {
    svalue_ = new ::std::string;
  }
  svalue_->assign(value);
}
inline void split::set_svalue(const char* value) {
  set_has_svalue();
  if (svalue_ == &::google::protobuf::internal::kEmptyString) {
    svalue_ = new ::std::string;
  }
  svalue_->assign(value);
}
inline void split::set_svalue(const char* value, size_t size) {
  set_has_svalue();
  if (svalue_ == &::google::protobuf::internal::kEmptyString) {
    svalue_ = new ::std::string;
  }
  svalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* split::mutable_svalue() {
  set_has_svalue();
  if (svalue_ == &::google::protobuf::internal::kEmptyString) {
    svalue_ = new ::std::string;
  }
  return svalue_;
}
inline ::std::string* split::release_svalue() {
  clear_has_svalue();
  if (svalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = svalue_;
    svalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void split::set_allocated_svalue(::std::string* svalue) {
  if (svalue_ != &::google::protobuf::internal::kEmptyString) {
    delete svalue_;
  }
  if (svalue) {
    set_has_svalue();
    svalue_ = svalue;
  } else {
    clear_has_svalue();
    svalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// statistic

// optional uint64 msgTotal = 1;
inline bool statistic::has_msgtotal() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void statistic::set_has_msgtotal() {
  _has_bits_[0] |= 0x00000001u;
}
inline void statistic::clear_has_msgtotal() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void statistic::clear_msgtotal() {
  msgtotal_ = GOOGLE_ULONGLONG(0);
  clear_has_msgtotal();
}
inline ::google::protobuf::uint64 statistic::msgtotal() const {
  return msgtotal_;
}
inline void statistic::set_msgtotal(::google::protobuf::uint64 value) {
  set_has_msgtotal();
  msgtotal_ = value;
}

// optional uint64 msgErr = 2;
inline bool statistic::has_msgerr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void statistic::set_has_msgerr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void statistic::clear_has_msgerr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void statistic::clear_msgerr() {
  msgerr_ = GOOGLE_ULONGLONG(0);
  clear_has_msgerr();
}
inline ::google::protobuf::uint64 statistic::msgerr() const {
  return msgerr_;
}
inline void statistic::set_msgerr(::google::protobuf::uint64 value) {
  set_has_msgerr();
  msgerr_ = value;
}

// optional uint64 msgOk = 3;
inline bool statistic::has_msgok() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void statistic::set_has_msgok() {
  _has_bits_[0] |= 0x00000004u;
}
inline void statistic::clear_has_msgok() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void statistic::clear_msgok() {
  msgok_ = GOOGLE_ULONGLONG(0);
  clear_has_msgok();
}
inline ::google::protobuf::uint64 statistic::msgok() const {
  return msgok_;
}
inline void statistic::set_msgok(::google::protobuf::uint64 value) {
  set_has_msgok();
  msgok_ = value;
}

// -------------------------------------------------------------------

// taskHB

// required uint32 taskId = 1;
inline bool taskHB::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void taskHB::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void taskHB::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void taskHB::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 taskHB::taskid() const {
  return taskid_;
}
inline void taskHB::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
}

// required uint32 jobId = 2;
inline bool taskHB::has_jobid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void taskHB::set_has_jobid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void taskHB::clear_has_jobid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void taskHB::clear_jobid() {
  jobid_ = 0u;
  clear_has_jobid();
}
inline ::google::protobuf::uint32 taskHB::jobid() const {
  return jobid_;
}
inline void taskHB::set_jobid(::google::protobuf::uint32 value) {
  set_has_jobid();
  jobid_ = value;
}

// required string serverDes = 3;
inline bool taskHB::has_serverdes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void taskHB::set_has_serverdes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void taskHB::clear_has_serverdes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void taskHB::clear_serverdes() {
  if (serverdes_ != &::google::protobuf::internal::kEmptyString) {
    serverdes_->clear();
  }
  clear_has_serverdes();
}
inline const ::std::string& taskHB::serverdes() const {
  return *serverdes_;
}
inline void taskHB::set_serverdes(const ::std::string& value) {
  set_has_serverdes();
  if (serverdes_ == &::google::protobuf::internal::kEmptyString) {
    serverdes_ = new ::std::string;
  }
  serverdes_->assign(value);
}
inline void taskHB::set_serverdes(const char* value) {
  set_has_serverdes();
  if (serverdes_ == &::google::protobuf::internal::kEmptyString) {
    serverdes_ = new ::std::string;
  }
  serverdes_->assign(value);
}
inline void taskHB::set_serverdes(const char* value, size_t size) {
  set_has_serverdes();
  if (serverdes_ == &::google::protobuf::internal::kEmptyString) {
    serverdes_ = new ::std::string;
  }
  serverdes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* taskHB::mutable_serverdes() {
  set_has_serverdes();
  if (serverdes_ == &::google::protobuf::internal::kEmptyString) {
    serverdes_ = new ::std::string;
  }
  return serverdes_;
}
inline ::std::string* taskHB::release_serverdes() {
  clear_has_serverdes();
  if (serverdes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = serverdes_;
    serverdes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void taskHB::set_allocated_serverdes(::std::string* serverdes) {
  if (serverdes_ != &::google::protobuf::internal::kEmptyString) {
    delete serverdes_;
  }
  if (serverdes) {
    set_has_serverdes();
    serverdes_ = serverdes;
  } else {
    clear_has_serverdes();
    serverdes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 business = 4;
inline bool taskHB::has_business() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void taskHB::set_has_business() {
  _has_bits_[0] |= 0x00000008u;
}
inline void taskHB::clear_has_business() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void taskHB::clear_business() {
  business_ = 0u;
  clear_has_business();
}
inline ::google::protobuf::uint32 taskHB::business() const {
  return business_;
}
inline void taskHB::set_business(::google::protobuf::uint32 value) {
  set_has_business();
  business_ = value;
}

// required uint32 status = 5;
inline bool taskHB::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void taskHB::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void taskHB::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void taskHB::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 taskHB::status() const {
  return status_;
}
inline void taskHB::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// optional .hummer.statistic stat = 6;
inline bool taskHB::has_stat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void taskHB::set_has_stat() {
  _has_bits_[0] |= 0x00000020u;
}
inline void taskHB::clear_has_stat() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void taskHB::clear_stat() {
  if (stat_ != NULL) stat_->::hummer::statistic::Clear();
  clear_has_stat();
}
inline const ::hummer::statistic& taskHB::stat() const {
  return stat_ != NULL ? *stat_ : *default_instance_->stat_;
}
inline ::hummer::statistic* taskHB::mutable_stat() {
  set_has_stat();
  if (stat_ == NULL) stat_ = new ::hummer::statistic;
  return stat_;
}
inline ::hummer::statistic* taskHB::release_stat() {
  clear_has_stat();
  ::hummer::statistic* temp = stat_;
  stat_ = NULL;
  return temp;
}
inline void taskHB::set_allocated_stat(::hummer::statistic* stat) {
  delete stat_;
  stat_ = stat;
  if (stat) {
    set_has_stat();
  } else {
    clear_has_stat();
  }
}

// repeated .hummer.split splits = 7;
inline int taskHB::splits_size() const {
  return splits_.size();
}
inline void taskHB::clear_splits() {
  splits_.Clear();
}
inline const ::hummer::split& taskHB::splits(int index) const {
  return splits_.Get(index);
}
inline ::hummer::split* taskHB::mutable_splits(int index) {
  return splits_.Mutable(index);
}
inline ::hummer::split* taskHB::add_splits() {
  return splits_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hummer::split >&
taskHB::splits() const {
  return splits_;
}
inline ::google::protobuf::RepeatedPtrField< ::hummer::split >*
taskHB::mutable_splits() {
  return &splits_;
}

// -------------------------------------------------------------------

// task

// required uint64 taskId = 1;
inline bool task::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void task::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void task::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void task::clear_taskid() {
  taskid_ = GOOGLE_ULONGLONG(0);
  clear_has_taskid();
}
inline ::google::protobuf::uint64 task::taskid() const {
  return taskid_;
}
inline void task::set_taskid(::google::protobuf::uint64 value) {
  set_has_taskid();
  taskid_ = value;
}

// required uint32 taskType = 2;
inline bool task::has_tasktype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void task::set_has_tasktype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void task::clear_has_tasktype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void task::clear_tasktype() {
  tasktype_ = 0u;
  clear_has_tasktype();
}
inline ::google::protobuf::uint32 task::tasktype() const {
  return tasktype_;
}
inline void task::set_tasktype(::google::protobuf::uint32 value) {
  set_has_tasktype();
  tasktype_ = value;
}

// required uint64 jobId = 3;
inline bool task::has_jobid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void task::set_has_jobid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void task::clear_has_jobid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void task::clear_jobid() {
  jobid_ = GOOGLE_ULONGLONG(0);
  clear_has_jobid();
}
inline ::google::protobuf::uint64 task::jobid() const {
  return jobid_;
}
inline void task::set_jobid(::google::protobuf::uint64 value) {
  set_has_jobid();
  jobid_ = value;
}

// optional uint32 business = 5;
inline bool task::has_business() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void task::set_has_business() {
  _has_bits_[0] |= 0x00000008u;
}
inline void task::clear_has_business() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void task::clear_business() {
  business_ = 0u;
  clear_has_business();
}
inline ::google::protobuf::uint32 task::business() const {
  return business_;
}
inline void task::set_business(::google::protobuf::uint32 value) {
  set_has_business();
  business_ = value;
}

// optional string serverDes = 6;
inline bool task::has_serverdes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void task::set_has_serverdes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void task::clear_has_serverdes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void task::clear_serverdes() {
  if (serverdes_ != &::google::protobuf::internal::kEmptyString) {
    serverdes_->clear();
  }
  clear_has_serverdes();
}
inline const ::std::string& task::serverdes() const {
  return *serverdes_;
}
inline void task::set_serverdes(const ::std::string& value) {
  set_has_serverdes();
  if (serverdes_ == &::google::protobuf::internal::kEmptyString) {
    serverdes_ = new ::std::string;
  }
  serverdes_->assign(value);
}
inline void task::set_serverdes(const char* value) {
  set_has_serverdes();
  if (serverdes_ == &::google::protobuf::internal::kEmptyString) {
    serverdes_ = new ::std::string;
  }
  serverdes_->assign(value);
}
inline void task::set_serverdes(const char* value, size_t size) {
  set_has_serverdes();
  if (serverdes_ == &::google::protobuf::internal::kEmptyString) {
    serverdes_ = new ::std::string;
  }
  serverdes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* task::mutable_serverdes() {
  set_has_serverdes();
  if (serverdes_ == &::google::protobuf::internal::kEmptyString) {
    serverdes_ = new ::std::string;
  }
  return serverdes_;
}
inline ::std::string* task::release_serverdes() {
  clear_has_serverdes();
  if (serverdes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = serverdes_;
    serverdes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void task::set_allocated_serverdes(::std::string* serverdes) {
  if (serverdes_ != &::google::protobuf::internal::kEmptyString) {
    delete serverdes_;
  }
  if (serverdes) {
    set_has_serverdes();
    serverdes_ = serverdes;
  } else {
    clear_has_serverdes();
    serverdes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string slot = 7;
inline bool task::has_slot() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void task::set_has_slot() {
  _has_bits_[0] |= 0x00000020u;
}
inline void task::clear_has_slot() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void task::clear_slot() {
  if (slot_ != &::google::protobuf::internal::kEmptyString) {
    slot_->clear();
  }
  clear_has_slot();
}
inline const ::std::string& task::slot() const {
  return *slot_;
}
inline void task::set_slot(const ::std::string& value) {
  set_has_slot();
  if (slot_ == &::google::protobuf::internal::kEmptyString) {
    slot_ = new ::std::string;
  }
  slot_->assign(value);
}
inline void task::set_slot(const char* value) {
  set_has_slot();
  if (slot_ == &::google::protobuf::internal::kEmptyString) {
    slot_ = new ::std::string;
  }
  slot_->assign(value);
}
inline void task::set_slot(const char* value, size_t size) {
  set_has_slot();
  if (slot_ == &::google::protobuf::internal::kEmptyString) {
    slot_ = new ::std::string;
  }
  slot_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* task::mutable_slot() {
  set_has_slot();
  if (slot_ == &::google::protobuf::internal::kEmptyString) {
    slot_ = new ::std::string;
  }
  return slot_;
}
inline ::std::string* task::release_slot() {
  clear_has_slot();
  if (slot_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = slot_;
    slot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void task::set_allocated_slot(::std::string* slot) {
  if (slot_ != &::google::protobuf::internal::kEmptyString) {
    delete slot_;
  }
  if (slot) {
    set_has_slot();
    slot_ = slot;
  } else {
    clear_has_slot();
    slot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string srcDes = 8;
inline int task::srcdes_size() const {
  return srcdes_.size();
}
inline void task::clear_srcdes() {
  srcdes_.Clear();
}
inline const ::std::string& task::srcdes(int index) const {
  return srcdes_.Get(index);
}
inline ::std::string* task::mutable_srcdes(int index) {
  return srcdes_.Mutable(index);
}
inline void task::set_srcdes(int index, const ::std::string& value) {
  srcdes_.Mutable(index)->assign(value);
}
inline void task::set_srcdes(int index, const char* value) {
  srcdes_.Mutable(index)->assign(value);
}
inline void task::set_srcdes(int index, const char* value, size_t size) {
  srcdes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* task::add_srcdes() {
  return srcdes_.Add();
}
inline void task::add_srcdes(const ::std::string& value) {
  srcdes_.Add()->assign(value);
}
inline void task::add_srcdes(const char* value) {
  srcdes_.Add()->assign(value);
}
inline void task::add_srcdes(const char* value, size_t size) {
  srcdes_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
task::srcdes() const {
  return srcdes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
task::mutable_srcdes() {
  return &srcdes_;
}

// repeated string dstDes = 9;
inline int task::dstdes_size() const {
  return dstdes_.size();
}
inline void task::clear_dstdes() {
  dstdes_.Clear();
}
inline const ::std::string& task::dstdes(int index) const {
  return dstdes_.Get(index);
}
inline ::std::string* task::mutable_dstdes(int index) {
  return dstdes_.Mutable(index);
}
inline void task::set_dstdes(int index, const ::std::string& value) {
  dstdes_.Mutable(index)->assign(value);
}
inline void task::set_dstdes(int index, const char* value) {
  dstdes_.Mutable(index)->assign(value);
}
inline void task::set_dstdes(int index, const char* value, size_t size) {
  dstdes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* task::add_dstdes() {
  return dstdes_.Add();
}
inline void task::add_dstdes(const ::std::string& value) {
  dstdes_.Add()->assign(value);
}
inline void task::add_dstdes(const char* value) {
  dstdes_.Add()->assign(value);
}
inline void task::add_dstdes(const char* value, size_t size) {
  dstdes_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
task::dstdes() const {
  return dstdes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
task::mutable_dstdes() {
  return &dstdes_;
}

// repeated .hummer.split splits = 10;
inline int task::splits_size() const {
  return splits_.size();
}
inline void task::clear_splits() {
  splits_.Clear();
}
inline const ::hummer::split& task::splits(int index) const {
  return splits_.Get(index);
}
inline ::hummer::split* task::mutable_splits(int index) {
  return splits_.Mutable(index);
}
inline ::hummer::split* task::add_splits() {
  return splits_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hummer::split >&
task::splits() const {
  return splits_;
}
inline ::google::protobuf::RepeatedPtrField< ::hummer::split >*
task::mutable_splits() {
  return &splits_;
}

// -------------------------------------------------------------------

// assignment

// optional uint64 tid = 1;
inline bool assignment::has_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void assignment::set_has_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void assignment::clear_has_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void assignment::clear_tid() {
  tid_ = GOOGLE_ULONGLONG(0);
  clear_has_tid();
}
inline ::google::protobuf::uint64 assignment::tid() const {
  return tid_;
}
inline void assignment::set_tid(::google::protobuf::uint64 value) {
  set_has_tid();
  tid_ = value;
}

// optional string split = 2;
inline bool assignment::has_split() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void assignment::set_has_split() {
  _has_bits_[0] |= 0x00000002u;
}
inline void assignment::clear_has_split() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void assignment::clear_split() {
  if (split_ != &::google::protobuf::internal::kEmptyString) {
    split_->clear();
  }
  clear_has_split();
}
inline const ::std::string& assignment::split() const {
  return *split_;
}
inline void assignment::set_split(const ::std::string& value) {
  set_has_split();
  if (split_ == &::google::protobuf::internal::kEmptyString) {
    split_ = new ::std::string;
  }
  split_->assign(value);
}
inline void assignment::set_split(const char* value) {
  set_has_split();
  if (split_ == &::google::protobuf::internal::kEmptyString) {
    split_ = new ::std::string;
  }
  split_->assign(value);
}
inline void assignment::set_split(const char* value, size_t size) {
  set_has_split();
  if (split_ == &::google::protobuf::internal::kEmptyString) {
    split_ = new ::std::string;
  }
  split_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* assignment::mutable_split() {
  set_has_split();
  if (split_ == &::google::protobuf::internal::kEmptyString) {
    split_ = new ::std::string;
  }
  return split_;
}
inline ::std::string* assignment::release_split() {
  clear_has_split();
  if (split_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = split_;
    split_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void assignment::set_allocated_split(::std::string* split) {
  if (split_ != &::google::protobuf::internal::kEmptyString) {
    delete split_;
  }
  if (split) {
    set_has_split();
    split_ = split;
  } else {
    clear_has_split();
    split_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool finiFlag = 3;
inline bool assignment::has_finiflag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void assignment::set_has_finiflag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void assignment::clear_has_finiflag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void assignment::clear_finiflag() {
  finiflag_ = false;
  clear_has_finiflag();
}
inline bool assignment::finiflag() const {
  return finiflag_;
}
inline void assignment::set_finiflag(bool value) {
  set_has_finiflag();
  finiflag_ = value;
}

// -------------------------------------------------------------------

// job

// required string jobDes = 1;
inline bool job::has_jobdes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void job::set_has_jobdes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void job::clear_has_jobdes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void job::clear_jobdes() {
  if (jobdes_ != &::google::protobuf::internal::kEmptyString) {
    jobdes_->clear();
  }
  clear_has_jobdes();
}
inline const ::std::string& job::jobdes() const {
  return *jobdes_;
}
inline void job::set_jobdes(const ::std::string& value) {
  set_has_jobdes();
  if (jobdes_ == &::google::protobuf::internal::kEmptyString) {
    jobdes_ = new ::std::string;
  }
  jobdes_->assign(value);
}
inline void job::set_jobdes(const char* value) {
  set_has_jobdes();
  if (jobdes_ == &::google::protobuf::internal::kEmptyString) {
    jobdes_ = new ::std::string;
  }
  jobdes_->assign(value);
}
inline void job::set_jobdes(const char* value, size_t size) {
  set_has_jobdes();
  if (jobdes_ == &::google::protobuf::internal::kEmptyString) {
    jobdes_ = new ::std::string;
  }
  jobdes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* job::mutable_jobdes() {
  set_has_jobdes();
  if (jobdes_ == &::google::protobuf::internal::kEmptyString) {
    jobdes_ = new ::std::string;
  }
  return jobdes_;
}
inline ::std::string* job::release_jobdes() {
  clear_has_jobdes();
  if (jobdes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = jobdes_;
    jobdes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void job::set_allocated_jobdes(::std::string* jobdes) {
  if (jobdes_ != &::google::protobuf::internal::kEmptyString) {
    delete jobdes_;
  }
  if (jobdes) {
    set_has_jobdes();
    jobdes_ = jobdes;
  } else {
    clear_has_jobdes();
    jobdes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 jobId = 2;
inline bool job::has_jobid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void job::set_has_jobid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void job::clear_has_jobid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void job::clear_jobid() {
  jobid_ = GOOGLE_ULONGLONG(0);
  clear_has_jobid();
}
inline ::google::protobuf::uint64 job::jobid() const {
  return jobid_;
}
inline void job::set_jobid(::google::protobuf::uint64 value) {
  set_has_jobid();
  jobid_ = value;
}

// required uint32 jobType = 3;
inline bool job::has_jobtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void job::set_has_jobtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void job::clear_has_jobtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void job::clear_jobtype() {
  jobtype_ = 0u;
  clear_has_jobtype();
}
inline ::google::protobuf::uint32 job::jobtype() const {
  return jobtype_;
}
inline void job::set_jobtype(::google::protobuf::uint32 value) {
  set_has_jobtype();
  jobtype_ = value;
}

// required uint32 jobStatus = 4;
inline bool job::has_jobstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void job::set_has_jobstatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void job::clear_has_jobstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void job::clear_jobstatus() {
  jobstatus_ = 0u;
  clear_has_jobstatus();
}
inline ::google::protobuf::uint32 job::jobstatus() const {
  return jobstatus_;
}
inline void job::set_jobstatus(::google::protobuf::uint32 value) {
  set_has_jobstatus();
  jobstatus_ = value;
}

// optional uint32 business = 5;
inline bool job::has_business() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void job::set_has_business() {
  _has_bits_[0] |= 0x00000010u;
}
inline void job::clear_has_business() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void job::clear_business() {
  business_ = 0u;
  clear_has_business();
}
inline ::google::protobuf::uint32 job::business() const {
  return business_;
}
inline void job::set_business(::google::protobuf::uint32 value) {
  set_has_business();
  business_ = value;
}

// optional uint32 cpucore = 6;
inline bool job::has_cpucore() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void job::set_has_cpucore() {
  _has_bits_[0] |= 0x00000020u;
}
inline void job::clear_has_cpucore() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void job::clear_cpucore() {
  cpucore_ = 0u;
  clear_has_cpucore();
}
inline ::google::protobuf::uint32 job::cpucore() const {
  return cpucore_;
}
inline void job::set_cpucore(::google::protobuf::uint32 value) {
  set_has_cpucore();
  cpucore_ = value;
}

// repeated string srcDes = 7;
inline int job::srcdes_size() const {
  return srcdes_.size();
}
inline void job::clear_srcdes() {
  srcdes_.Clear();
}
inline const ::std::string& job::srcdes(int index) const {
  return srcdes_.Get(index);
}
inline ::std::string* job::mutable_srcdes(int index) {
  return srcdes_.Mutable(index);
}
inline void job::set_srcdes(int index, const ::std::string& value) {
  srcdes_.Mutable(index)->assign(value);
}
inline void job::set_srcdes(int index, const char* value) {
  srcdes_.Mutable(index)->assign(value);
}
inline void job::set_srcdes(int index, const char* value, size_t size) {
  srcdes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* job::add_srcdes() {
  return srcdes_.Add();
}
inline void job::add_srcdes(const ::std::string& value) {
  srcdes_.Add()->assign(value);
}
inline void job::add_srcdes(const char* value) {
  srcdes_.Add()->assign(value);
}
inline void job::add_srcdes(const char* value, size_t size) {
  srcdes_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
job::srcdes() const {
  return srcdes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
job::mutable_srcdes() {
  return &srcdes_;
}

// repeated string dstDes = 8;
inline int job::dstdes_size() const {
  return dstdes_.size();
}
inline void job::clear_dstdes() {
  dstdes_.Clear();
}
inline const ::std::string& job::dstdes(int index) const {
  return dstdes_.Get(index);
}
inline ::std::string* job::mutable_dstdes(int index) {
  return dstdes_.Mutable(index);
}
inline void job::set_dstdes(int index, const ::std::string& value) {
  dstdes_.Mutable(index)->assign(value);
}
inline void job::set_dstdes(int index, const char* value) {
  dstdes_.Mutable(index)->assign(value);
}
inline void job::set_dstdes(int index, const char* value, size_t size) {
  dstdes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* job::add_dstdes() {
  return dstdes_.Add();
}
inline void job::add_dstdes(const ::std::string& value) {
  dstdes_.Add()->assign(value);
}
inline void job::add_dstdes(const char* value) {
  dstdes_.Add()->assign(value);
}
inline void job::add_dstdes(const char* value, size_t size) {
  dstdes_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
job::dstdes() const {
  return dstdes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
job::mutable_dstdes() {
  return &dstdes_;
}

// repeated .hummer.split splits = 9;
inline int job::splits_size() const {
  return splits_.size();
}
inline void job::clear_splits() {
  splits_.Clear();
}
inline const ::hummer::split& job::splits(int index) const {
  return splits_.Get(index);
}
inline ::hummer::split* job::mutable_splits(int index) {
  return splits_.Mutable(index);
}
inline ::hummer::split* job::add_splits() {
  return splits_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hummer::split >&
job::splits() const {
  return splits_;
}
inline ::google::protobuf::RepeatedPtrField< ::hummer::split >*
job::mutable_splits() {
  return &splits_;
}

// repeated .hummer.assignment assigns = 10;
inline int job::assigns_size() const {
  return assigns_.size();
}
inline void job::clear_assigns() {
  assigns_.Clear();
}
inline const ::hummer::assignment& job::assigns(int index) const {
  return assigns_.Get(index);
}
inline ::hummer::assignment* job::mutable_assigns(int index) {
  return assigns_.Mutable(index);
}
inline ::hummer::assignment* job::add_assigns() {
  return assigns_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hummer::assignment >&
job::assigns() const {
  return assigns_;
}
inline ::google::protobuf::RepeatedPtrField< ::hummer::assignment >*
job::mutable_assigns() {
  return &assigns_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hummer

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_job_2eproto__INCLUDED
